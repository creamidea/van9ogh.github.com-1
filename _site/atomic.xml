<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forest Gump</title>
  <link href="http://forestgump.me/"/>
  <link href="http://forestgump.me/atom.xml" rel="self"/>
  <updated>2013-02-02T00:15:17+08:00</updated>
  <id>http://forestgump.me/</id>
  <author>
    <name>Liu Peng</name>
    <email>cow.vangogh@gmail.com</email>
  </author>

  
  <entry>
    <title>Git Submodule使用</title>
    <link href="http://forestgump.me/2013/02/git-submodule/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-02-01T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/02/git-submodule</id>
    <content type="html">&lt;p&gt;通常在开发项目的时候我们会引用其它的开源项目, 一般情况下, 就是用git clone然后cp到自己的项目中, 于是自己的项目越来越大, 更新时间可以喝咖啡了 ;-)&lt;/p&gt;

&lt;p&gt;现在有一个新的办法, 就是git submodule命令, 我们来一睹它的强大之处.&lt;/p&gt;

&lt;p&gt;先来看用法:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4685350.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;其中 --recursive表示递归执行命令, path相当于重命名的.一般用法直接这样就行:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;1. git submodule add git@github.com:van9ogh/submodule1.git submodule1
2. git submodule add git@github.com:van9ogh/submodule2.git submodule2 
3. git submodule init     &lt;span class=&quot;c&quot;&gt;# 注册这两个子项目&lt;/span&gt;
4. git submodule update   &lt;span class=&quot;c&quot;&gt;# 开始下载这两个子项目 &lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# foreach就是用来循环遍历的, 这样就不需要进入到每一个submodule中&lt;/span&gt;
5. git submodule foreach git commit -a -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;publish&amp;#39;&lt;/span&gt; 
6. git submodule foreach git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;后记&lt;/h1&gt;

&lt;p&gt;这次使用这个命令是因为github的jekyll不支持插件, 而我又添加了插件, 于是文章必须自己编译好之后上传, 这样就会有两个repo, 一个就是van9ogh.github.com.git用来作为github pages, 里面是编译好的HTML代码. 而源文件放在forestgump.me.git.
这样van9ogh.github.com作为submodule.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>使用jekyll的一些注意点</title>
    <link href="http://forestgump.me/2013/01/octopress_and_something_about_jekyll/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-31T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/octopress_and_something_about_jekyll</id>
    <content type="html">&lt;h1&gt;插件&lt;/h1&gt;

&lt;p&gt;octopress的插件太丰富了, 看&lt;a href=&quot;http://octopress.org/docs/plugins/&quot;&gt;这里&lt;/a&gt;和&lt;a href=&quot;https://github.com/imathis/octopress/wiki/3rd-party-plugins&quot;&gt;这里&lt;/a&gt;, 一个是官方的, 一个是third-party. 于是剽窃了几个: related_posts.rb, include_code.rb, 前者是用来显示相关的帖子(用tags做为关键字), 后者是可以直接使用liquid的include_code直接加载代码文件,这两个太有用了.&lt;/p&gt;

&lt;h1&gt;图片服务&lt;/h1&gt;

&lt;p&gt;还有这次比较了几个图片服务(image hosting or online photo service), 本来想使用国内的yupoo(又拍), 但是对于链接的管理太麻烦了, 免费用户的限制太多. 再一次尝试了一下&lt;img src=&quot;http://i1277.photobucket.com/albums/y489/van9ogh/forestgump/flickr-logo-2012_zps049493ea.png&quot; alt=&quot;flickr-logo&quot; /&gt;, 但是怎么也注册不上, 最后选择了&lt;a href=&quot;http://photobucket.com&quot;&gt;photobucket&lt;/a&gt; 而且这个网站设计的非常棒!&lt;/p&gt;

&lt;h1&gt;Index Search&lt;/h1&gt;

&lt;p&gt;关于目录搜索服务(index search), 一开始发现在jekyll上有人做了这个项目: &lt;a href=&quot;https://github.com/PascalW/jekyll_indextank&quot;&gt;jekyll_indextank&lt;/a&gt;, 原理是将blog的内容全部上传到indextank上, 利用&lt;a href=&quot;indextank-service&quot;&gt;indextank service api&lt;/a&gt;进行搜索.其实这个也可以使用&lt;a href=&quot;http://www.elasticsearch.org/&quot;&gt;elasticsearch&lt;/a&gt;做一个这样的服务, 支持Java的PaaS是很多的, 这里就有一篇&lt;a href=&quot;http://www.paasmag.com/2012/06/07/running-elasticsearch-with-tomcat-on-jelastic/&quot;&gt;实践&lt;/a&gt;, indextank.com可能需要翻墙, 只能作罢.&lt;/p&gt;

&lt;h1&gt;jekyll的一些小技巧&lt;/h1&gt;

&lt;h4&gt;1. 页内跳转&lt;/h4&gt;

&lt;p&gt;标准的markdown语法并没有这个功能, 于是还是要使用一下html标签, 来解决.&lt;/p&gt;

&lt;p&gt;先定义一个锚(id)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jump&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后使用markdown的语法:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;[XXXX](#jump)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. 图片url前缀&lt;/h4&gt;

&lt;p&gt;如果使用的是托管的图片服务器, 那么为了方便以后迁移, 可以在_config.yml中设置一个img_url, 就像这样:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;img_url: &amp;quot;http://www.paasmag.com/2012/06/07/running-elasticsearch-with-tomcat-on-jelastic/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后这样使用:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4683628.js&quot;&gt;&lt;/script&gt;


&lt;h1&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jiyeqian.github.com/2012/07/host-your-pages-at-github-using-jekyll/&quot;&gt;基于jekyll的github建站指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://time.to.pullthepl.ug/blog/2012/8/20/octopress-top-categories-plugin/&quot;&gt;Octopress Top Categories Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pwiddershoven.nl/blog/2011/05/11/jekyll-indextank-static-website-fulltext-search.html&quot;&gt;Jekyll + indextank = static websites with fulltext search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.paasmag.com/2012/06/07/running-elasticsearch-with-tomcat-on-jelastic/&quot;&gt;Running elasticsearch with Tomcat on Jelastic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot;&gt;jekyll wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
  <entry>
    <title>设置Chrome对待Google总是Https</title>
    <link href="http://forestgump.me/2013/01/set_chrome_https/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-30T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/set_chrome_https</id>
    <content type="html">&lt;p&gt;虽然Google已经采用了全程https, 但是在使用Google搜索的时候, 我们还是经常会发生这样的事情, 搜索出结果以后点击某一个链接, 失效.但这时常常往往补上一个&lt;strong&gt;https://&lt;/strong&gt;就可以访问了.原因大家都懂的. 那Chrome可不可以不用手动输入这个&lt;/strong&gt;https://&lt;/strong&gt;呢, 答案是肯定有的.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/chrome-net_internals.png&quot; alt=&quot;Chrome Net Internals&quot; /&gt;&lt;/p&gt;

&lt;p&gt;效果是这样的:&lt;/p&gt;

&lt;h1&gt;之前&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/google-apple-before.png&quot; alt=&quot;before&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;之后&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/google-apple-after.png&quot; alt=&quot;after&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GoodLuck~&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>设计网站新样式</title>
    <link href="http://forestgump.me/2013/01/new_site_design/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-28T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/new_site_design</id>
    <content type="html">&lt;p&gt;第三次设计这个静态Blog了, 参考了大量的Blog设计, 借鉴了一些js代码和CSS样式, 好吧, 我承认, 这些其实不怎么受我控制. 虽然已经有很好的框架比如&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;bootstrap&lt;/a&gt;, 甚至还有&lt;a href=&quot;http://fortawesome.github.com/Font-Awesome/&quot;&gt;font-awesome&lt;/a&gt;这样精美的iconic font, 以及JQuery. 不过比起之前那个窄窄的design, 已经很满意了.特别要鸣谢我的战友: icecream帮我实现了在&lt;a href=&quot;/about.html&quot;&gt;about&lt;/a&gt;页面显示&lt;code&gt;最新xkcd漫画&lt;/code&gt;的想法.&lt;/p&gt;

&lt;p&gt;有两点我认为应该写入TODO的:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;图片服务和代码服务&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;将图片保存在网站根目录的/images下实在不怎么高明, 因为基本上很难找到这张图片, 搜索将是一个麻烦事, 我们需要的其实是一个托管的图片服务, 解决方案其一是采用&lt;a href=&quot;http://www.flickr.com/&quot;&gt;flickr&lt;/a&gt;这样的图片服务, 但是由于GFW, 我们又很担心被墙之后, 糟糕的页面.其二是用Worepress强大的插件, 搭建一个图片服务, 但是目前迫于经济, 没有现成的VPS, 而Appfog类似免费的PaaS我还没有去尝试, 但我认为是可以的.&lt;/p&gt;

&lt;p&gt;代码服务, 除了使用jekyll自带的pygments, 我想以后还会用gist保存, 就像这样:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4654821.js&quot;&gt;&lt;/script&gt;


&lt;ul&gt;
&lt;li&gt;建立目录索引&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;大家可能认为这个问题很简单, 但其实在jekyll中是要自己实现一个插件, 使得在编译时能够生成每一个分类对应的信息, 否则就只能生成一个页面而不能每一个分类对应一个页面.这个事情, Jekyll中的Liquid和YAML都帮不上忙, 只能用Ruby修改Jekyll核心, 目前还没有这个打算.其实还是很羡慕Worldpress的插件的.貌似在&lt;a href=&quot;http://octopress.org/&quot;&gt;octopress&lt;/a&gt;上这个已经不是问题了, 但目前还没有打算迁移.&lt;/p&gt;

&lt;p&gt;除此之外, 别无所求, 我希望Blog尽可能简单, 主要用来记载一些读书笔记以及一些随想, 用来做总结之用, 我知道在没有量的基础上添加这些功能其实都是花哨的, 很多问题其实是大数据量的问题, 因此只有在文章量上去之后, 再重新设计解决.&lt;/p&gt;

&lt;p&gt;因此总的来说还是满意的, 这部分工作要放一放了, 今天读了阮一峰&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/05/900-month_lifespan.html&quot;&gt;人生只有900个月&lt;/a&gt;中的照片感触也挺深的, 时间确实耗费不起, 接下来要去学习开关电源和PCB制版了, GoodLuck~&lt;/p&gt;

&lt;h1&gt;2013-01-31 添加&lt;/h1&gt;

&lt;p&gt;今天看到一个设计的很棒的网站:http://area51.stackexchange.com/, 我感觉这就是我想要的, 特别是宽度刚刚好, 页脚也很漂亮, 侧边栏的菜单效果非常棒, 最上面的搜索是个点睛之笔.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>使用新的域名: forestgump.me</title>
    <link href="http://forestgump.me/2013/01/new-domain/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-25T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/new-domain</id>
    <content type="html">&lt;p&gt;域名其实半年前就想去注册的, 一直没有时间, 一开始还以为只要域名无法访问, 域名就没有被人注册(因为一开始我想注册的是quick.com, 其实查询需要到whois上, &lt;strong&gt;quick.com&lt;/strong&gt;早在&lt;strong&gt;199x&lt;/strong&gt;年就被抢注了).于是苦思冥想之后, 发现forestgump.me(阿甘)还没有被注册, 说来也奇怪, forestgump.com在2012年才有人想要注册, 如果当时动作快点, 或许这个域名还有机会, 话说.me域名原来是门的内哥罗(Montenegro，旧译“黑山”)的国家域名. 本文主要是记录注册的这个过程, 方便以后查阅.&lt;/p&gt;

&lt;p&gt;域名提供商选的是godaddy, 在淘宝上花了55元, 过户很快, 几分钟搞定, 接下来就是尝试将github pages迁移一下, 将A记录修改为204.232.175.78, 又添加了一条CNAME: van9ogh.github.com, 然后去github对应的repo中添加了一个文件, 内容为: forestgump.me, 就都完成了.&lt;/p&gt;

&lt;p&gt;这中间, 顺带尝试了自定义域名邮件服务, 原本以为Gmail会提供, 居然没找到china!, 地址在这里:&lt;a href=&quot;https://www.google.com/a/signup/?hl=en&amp;amp;source=gafb-persemail-en&quot;&gt;Google App for Business&lt;/a&gt;. 而Hotmail, 微软弄了很多窗口加上Windows8有大又累赘的标签风格, 实在没有明白. 最后尝试了一下163, 定制了一个&lt;a href=&quot;http://mail.forestgump.me&quot;&gt;mail&lt;/a&gt;页面, 不过MX记录验证还没有通过, 应该问题不大. 再次吐嘈一下Hotmail, 又是live.com, 又是hotmail.com, 又是microsoft.com, 有点像踢皮球. 这摆明了是在玩弄程序员!&lt;/p&gt;

&lt;p&gt;有空再尝试下&lt;a href=&quot;http://www.dnspod.com&quot;&gt;DnsPod&lt;/a&gt;、&lt;a href=&quot;http://www.opendns.com&quot;&gt;OpenDNS&lt;/a&gt;, 不过貌似在家也很快, 也没有被墙.(铁通 2M 网络)&lt;/p&gt;

&lt;p&gt;最近也有被PaaS 平台所吸引, 虽然没有VPS灵活性高, 但框架和App确实也可以做很多事情, 比如说GAE+goagnet, 以及Paas+svona等应gfw而生的tools. 而VPS甚至可以做到借助&lt;a href=&quot;http://dnstunnel.de/&quot;&gt;dns tunnel&lt;/a&gt;, &lt;a href=&quot;http://www.cs.uit.no/~daniels/PingTunnel/&quot;&gt;ping tunnel&lt;/a&gt;隧道免费上网, 这个换做PaaS可做不到, 除非平台提供, 因为我们无法私自开启端口. 原理其实很类似, 无非是使用server+client借助其它的协议(www、icmp、dns)将data从一个点搬运到另一个点. 如果为躲避gfw, 当然还需要tunnel技术.&lt;/p&gt;

&lt;p&gt;Github Pages和Paas以及VPS比起来, 其实已经很好的满足了需求, 因为对于blog, 并不需要数据库, 甚至不需要自己的搜索引擎(google的站点搜索足够了): 简单性是系统设计的第一要素，实现的简单比接口的简单更重要；任何值得注意的方面都要求正确性，但为了简单性，正确性可以轻微让步；设计不能过于不一致，但为了简单性，一致性可以有所牺牲；完备性应该覆盖实践中许多重要的情况，但只要简单性受到危害，完备性必须作出牺牲。这也是Richard Gabriel的&lt;a href=&quot;http://www.jwz.org/doc/worse-is-better.html&quot;&gt;worse is better&lt;/a&gt;要说的.&lt;/p&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.whois.com/&quot;&gt;whois&lt;/a&gt; 查询域名信息, 也可以到域名注册商那查询&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.godaddy.com/&quot;&gt;godaddy&lt;/a&gt; 最大的域名注册商&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dnspod.com&quot;&gt;dnspod&lt;/a&gt; DNS智能加速(国内)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opendns.com&quot;&gt;OpenDNS&lt;/a&gt; 提供DNS优化服务&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.name.com&quot;&gt;name.com&lt;/a&gt; name.com的网站用户体验比godaddy好很多, 也很推荐!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;Github pages&lt;/a&gt;  阮一峰的这篇讲Github Pages介绍的挺好.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; [全文完]&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lua学习笔记(2): 协程</title>
    <link href="http://forestgump.me/2013/01/lua-coroutine/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-09T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/lua-coroutine</id>
    <content type="html">&lt;p&gt;这篇文章来自于阅读lua的作者写的&lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/docs/corosblp.pdf&quot;&gt;coroutines in lua&lt;/a&gt;, 翻译了一部分, 又加入一些了自己的理解. 形式化描述那部分没有翻译, 还有一些关于continuation机制的也没有过多翻译, 这两个方面的链接已经列在文末.&lt;/p&gt;

&lt;h2&gt;摘要&lt;/h2&gt;

&lt;p&gt;协程在过去是一个被人遗忘的概念, 不过慢慢的又开始复兴, 大多数目前的协程实现的并不完整, 或多或少只能用在特定的场合.提供一个真正的协程往往被人所忽略, 本文一方面讨论的是Lua中的协程机制, 它是一个非对称协程的完全实现, 另一方面也向你展示这一强大的控制行为的工具.&lt;/p&gt;

&lt;h2&gt;1. 简介&lt;/h2&gt;

&lt;p&gt;协程是为了解决general control abstraction而提出的最古老建议之一, 贡献者是Conway(1963), 它被描述为行为像主程序的子程序, 当时的实现依靠的是COBOL编译器的词法分析和语义分析, 1980年的时候, Marlin的博士论文完整的描述了它的原理, 阐明了它的特征:&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;the values of data local to a coroutine persist between successive calls(数据的持久性)&lt;/li&gt;
&lt;li&gt;the execution of a coroutine is suspended as control leaves it, only to carry on where it left off when control re-enters the coroutine at some later stage.(并不是并发, 类似于时分多路)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;协程适用的场合来自于这些年的一些需求:并发编程、仿真、文本处理、人工智能以及各种数据结构的操作. 然而这一强大的control abstraction工具在通用语言设计的时候却被忽略了, 只有极少数的一些特例: Simula、BCPL、Modula2、Icon等语言.&lt;/p&gt;

&lt;p&gt;这中间, 一部分的原因就是对协程的概念没有一个统一的认识, 而且很多论文中对协程的描述都来自于Simula语言, 包括Marlin的. 然而Simula本身对协程复杂的实现导致了大家都认为它是一个尴尬的、难以维护和理解的实现.&lt;/p&gt;

&lt;p&gt;然而协程并没有真正被遗忘, 这些年它在慢慢复兴, 尤其是在以下两个不同的方面.一方面和开发多任务应用程序有关, 我们发现协作式的多任务比多进程环境更具有优势! 在这一应用场景中, 协程主要以library的形式出现, 比如微软的fibers(纤程), 有趣的是协程的术语都没有被提出来, 这就是需求, 因此随后概念会被技术人员抽象出来, 于是协程原地满血了.&lt;/p&gt;

&lt;p&gt;另一方面就是脚本语言, 特别是Lua, Python, Perl. Python最近推出了一个受限制的协程, 能够允许simple iterators或者generators, 但是还不是足够强大: 没有实现一些有趣的功能, 包括用户层面的多任务. Perl也提出了类似的机制. 不同的是Lua, 它是一个真正意义上的协程实现.&lt;/p&gt;

&lt;p&gt;本文的主要就是展示并讨论Lua中的协程机制, 安排是这样的: Section2主要是介绍一下Lua语言以及描述一下协程的机制, 提出它的操作语义(operational semantics). Section3将通过一些相关的demo来阐述这一强大的非对称协程的使用. 然后Section4将再次讨论其他语言中协程的情况. 最后Section5我们将做出总结.&lt;/p&gt;

&lt;h2&gt;2. Lua Coroutines(Lua中的协程)&lt;/h2&gt;

&lt;p&gt;Lua是一门轻量级的基于数据描述的通用编程语言, 特性有: dymanically typed, lexically scoped, interpreted from bytecodes, 以及垃圾回收. Lua主要被设计用来作为一门扩展语言, 嵌入到host program中(宿主主机).&lt;/p&gt;

&lt;p&gt;Lua一开始就是为了更容易整合到C/C++以及其它一些conventional language中而设计的, Lua的本身是用ANSIC写成的(纯C), 因此可以支持相当多的平台, 除了Lua的解释器, Lua本身也提供了一组C function API集合, 允许host program可以和Lua通信, 通过这组API, host program就可以访问Lua脚本中的变量、调用Lua脚本中的函数了.除了这种embedded功能, 我们还可以利用这组API进行extending, 这样我们就可以在Lua脚本中调用C函数了!从这个角度, Lua可以用来构造&lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lua主要实现的是非对称协程, 通常被表示为semi-symmetric或者semi-coroutines, 之所以这样称呼, 是因为它有两种控制操作, 一个是为了调用(invoke)协程, 另一个是为了挂起(suspend)协程, 一旦挂起就可以返回到其他的调用协程了. 非对称协程可以认为是服从于调用者, 它们之间类似于被调用和调用例程的关系, 和这个不同的是对称的协程, 它只是简单的transfer operation来切换.由于对称协程是将控制传递给selves的, 因此selves是在同一个继承级别上的. 看似这两者都没有问题, 那为什么Lua最终选择非对称coroutine而不是对称或者他们两者呢? 我们还是有一些理由的.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其一&lt;/strong&gt;, 对称和非对称协程语言表达能力上是不同的, 而通用的协程机制本应该都提供, 然而事实上我们很容易演示的是对称协程可以由非对称协程来表达, 因此即使仅仅提供非对称协程, 语言的表达能力并没有被削弱, 实现它们两者只会增加语言语义的复杂度. 其实正是由于引入了对称协程导致了Simula语言在语义上的不一致.这就好比&lt;a href=&quot;http://en.wikipedia.org/wiki/Syntactic_sugar&quot;&gt;语法糖&lt;/a&gt;, 其实基本的语义已经覆盖了这些功能, 添加语法糖只不过是方便了使用它的人, 但如果滥用, 就会将语言推向深渊. 读者还可以看看图灵等价, 这些思想就像当年的能量守恒定律一样, 是在维护一些科学的基本原则, 让人们明白发明能够解决一些问题的计算机语言就和永动机一样, 都不靠谱.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其二&lt;/strong&gt;, Simplicity and Portability&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其三&lt;/strong&gt;, 更容易整合到宿主program&lt;/p&gt;

&lt;h2&gt;2.1 Lua Coroutine Facilities&lt;/h2&gt;

&lt;p&gt;Lua协程提供了三种基本的操作: create, resume, yield. 和大多数Lua的库一样, 这些函数在一张全局表内.(coroutine)&lt;/p&gt;

&lt;h3&gt;coroutine.create&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;cm&quot;&gt;--[[ 创建一个新的协程, 并为它分配一个独立的栈, 接受一个函数作为参数, 返回这个coroutine的引用.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     并没有excute coroutine, 这个新协程一开始被挂起, 通常参数f作为匿名函数来传入&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    co = coroutine.create(function () ... end)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;--]]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lua coroutine以变量的方式被存储, 能够被当作函数参数, 或者被函数返回, 并没有严格提供删除协程的操作, 这个和Lua中其他的值一样, 通过垃圾回收机制来释放.&lt;/p&gt;

&lt;h3&gt;coroutine.resume&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;cm&quot;&gt;--[[ 激活一个协程, 第一个参数是一个协程的引用, 就是由coroutine.create返回的那个, 一旦&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     恢复运行, 协程会在上一次断点处继续运行直到再次被挂起或者结束.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;--]]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;coroutine.yield&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;cm&quot;&gt;--[[ 挂起一个协程, 此时该协程的运行状态立刻被保存, 直到调用coroutine.resume, 注意yield参数&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     就是resume返回的参数的后面部分, 读者可以对比一下.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;--]]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于协程是在一个独立的栈内实现的, coroutine.yield甚至允许发生在嵌套Lua函数(比如直接或间接地调用lua main function)一旦下一次协程resume, 它就会在完全在上一次的断点处继续执行.哪里跌倒就会在哪里爬起来.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么协程什么时候结束呢?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主函数返回的时候, 这个时候我们可以说协程Dead, 再也不会被恢复&lt;/li&gt;
&lt;li&gt;运行过程中发生错误的时候, 正确返回的时候, coroutine.resume返回(true, [val1, val2, ...]), 而错误的时候将返回(falue, &quot;error message&quot;).&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;coroutine.wrap&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Lua有一个auxiliary library, 其中对coroutine又作了一些扩展, coroutine.wrap就是一个.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;cm&quot;&gt;--[[ 这个函数和coroutine.create类似, 其实是coroutine.create和coroutine.resume的包装:&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;function wrap(f)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   local co = coroutine.create(f)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   return function(v)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       status, ret = coroutine.resume(co, v)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       if status then&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;           return ret&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       else&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;           error(ret)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       end&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   end&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;--]]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lua提供了非常便捷的方法来让协程和它的调用者exchange data, 我们来看一些demo:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 协程第一次被激活&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 此时 b = 22&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 协程第二次被激活&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 此时d = 23 * 2 = 46&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2.2 An Operational Semantics for Lua Asymmetric Coroutines(非对称协程的操作语义)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;这一节为纯数学推导和定义, 可以参考&lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/docs/corosblp.pdf&quot;&gt;原文&lt;/a&gt;和&lt;a href=&quot;http://www.cs.indiana.edu/~dyb/pubs/LaSC-7-1-pp83-110.pdf&quot;&gt;HIEB 1994&lt;/a&gt;两篇论文.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;3. Programming With Lua Asymmetric Coroutines&lt;/h2&gt;

&lt;p&gt;这一节我们从两个应用来围观Lua中非对称协程这一强大的特性: 生成器(generators)和协作式多任务(cooperative multitasking).&lt;/p&gt;

&lt;h3&gt;3.1 生成器(generators)&lt;/h3&gt;

&lt;p&gt;生成器就是用来产生值序列的工具, 每一次调用都返回一个新的值, 有一个典型的例子就是迭代器(iterator).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;demo1.lua&lt;/strong&gt; : 二叉树的先序遍历&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- 三个叶子&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 三个内部节点&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 先序遍历二叉树&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 迭代器&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preorder_iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 使用范型for&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder_iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 打印结果为: d b e a c&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;整个执行是这样的: preorder_iterator迭代器只会运行一次, 接下来范型for每一次都会调用由coroutine.wrap返回的函数(暂时称为f), 直到node为nil, 迭代结束. 而f的返回值由coroutine.yield带出来的, 因此print每次打印的都是node.key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们再看一个例子&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;demo2.lua&lt;/strong&gt;: 合并两棵二叉树&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- 第一棵树, root为a&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 第二棵树, root为n&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preorder_iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- 生成两个迭代器函数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder_iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;preorder_iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- 首先由迭代器分别从它们自己的树上吐出key&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- 比较这两棵树上的key的大小, 优先输出小的&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 输出结果为d b e a c g n f m n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成器(generators)还可以用于面向目的的编程(goal-oranted programming), 比如编写类似于&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/Prolog&quot;&gt;Prolog&lt;/a&gt;查询或者模式匹配的时候, 你不需要知道怎么去做, 你只要制定一个目标, 接下来让计算机帮你找到这个目标.其实这是通过回溯来完成的.&lt;/p&gt;

&lt;h3&gt;3.2 User-Level Multitasking&lt;/h3&gt;

&lt;p&gt;用协程来完成并行一开始是在Modula-2语言中, 但是后来由于线程(threads)的出现, 协程就被人们忽略了.&lt;/p&gt;

&lt;p&gt;但是使用协程来完成并发任务的语言并不需要额外的数据结构来保证数据的一致性, 这个和基于抢占的多任务不同, 协程提供的并发机制叫做协作多任务.也就是当你不需要使用资源的时候就挂起自己来让别的人来使用.&lt;/p&gt;

&lt;p&gt;编写多线程应用程序确实不是一个简单的任务, 特别是在某些环境中, 比如操作系统, 实时应用程序等, 它们对实时性要求特别高, 基于抢占的多任务就很难做到了.它们往往要考虑如何制定完善的同步策略, 再加上很多的开发者并没有多少并发编程的经验, 这个就有点像&amp;lt;&amp;lt;人月神话&gt;&gt;了, 系统越大, 问题越大.协作式多任务消除了这种冲突, 最小化同步的消耗, 看起来更适合!&lt;/p&gt;

&lt;p&gt;在Lua中使用coroutine完成这样的工作很直接, 也很简单.每当我们创建一个新的task, 它就会被插入到任务列表中, 然后一个简单的任务调度器将不断的迭代这个任务表, 不断的运行每一个任务, 移除那些完成了的任务.&lt;/p&gt;

&lt;p&gt;唯一的一个缺点是在使用阻塞操作的时候, 比如调用I/O操作阻塞的时候, 这个时候程序无法主动调用yield, 那么整个进程将发生阻塞直到I/O操作完成, 当然这个也很好解决, 只需要引入一个非阻塞的库即可.&lt;/p&gt;

&lt;h2&gt;4. Coroutines in Programming Language（其它语言的Coroutines)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;最广为人知的支持协程的语言就是Simula, 而且它还引入了对称协程(semi coroutine), 反正极其复杂~&lt;/li&gt;
&lt;li&gt;70年代被广泛使用的BCPL语言(C语言的祖先), 也是一个典型的例子, 和Simula一样, BCPL也支持两种协程.&lt;/li&gt;
&lt;li&gt;Modula2&lt;/li&gt;
&lt;li&gt;最先提出迭代器的是CLU语言, 但是局限性很多. 受到CLU的启发, &lt;a href=&quot;http://en.wikipedia.org/wiki/Sather&quot;&gt;sather&lt;/a&gt;也实现了迭代器, 但是在当时复杂的想合并二叉树这种应用还是没法解决的.&lt;/li&gt;
&lt;li&gt;Python和Perl6&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stackless.com/&quot;&gt;Stackless Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.arizona.edu/icon/&quot;&gt;Icon Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;5. 总结&lt;/h2&gt;

&lt;p&gt;本文主要介绍了Lua语言中的非对称协程, 说明了它的用法.也展示了其它的例如generators、回溯、多任务中的使用, 我们发现这些技术在非对称协程中很容易表达, 其实这并不是巧合, 事实上&lt;a href=&quot;http://en.wikipedia.org/wiki/Delimited_continuation&quot;&gt;partial continuations&lt;/a&gt;和asymmeric coroutine在很多地方都是相似的.&lt;/p&gt;

&lt;p&gt;虽然continuation这一概念表达能力很强, 但是它仍然很难让人理解, 特别是在面向过程的编程中, 而asymmeric coroutine也有着相同的能力, 但是却可以很容易的在面向过程式编程中让人理解.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后我们实现一下对称协程&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- create a new coroutine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- transfer control to a coroutine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trasnfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- dispatching loop(excutes in main program)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;coroutine ended without trasnfering control...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6. 参考 &amp;amp; 资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/docs/&quot;&gt;Roberto(Lua作者之一)公开的一些Lua资料&lt;/a&gt; 重点是这两篇: 1. &lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/docs/MCC15-04.pdf&quot;&gt;Revisiting Coroutines&lt;/a&gt; 2. &lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/docs/corosblp.pdf&quot;&gt;Coroutines in Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codingnow.com/2010/06/masterminds_of_programming_7_lua.html&quot;&gt;采访 Lua 发明人的一篇文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation&quot;&gt;Continuation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation_passing_style&quot;&gt;CSP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Delimited_continuation&quot;&gt;Delimited continuation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/First-class_citizen&quot;&gt;first-class&lt;/a&gt; 本文first-class object翻译应该为第一类对象&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.arizona.edu/icon/&quot;&gt;the Icon Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stackless.com/&quot;&gt;Python Stackless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Sather&quot;&gt;Sather Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/Prolog&quot;&gt;Prolog 逻辑编程语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dyb/pubs/LaSC-7-1-pp83-110.pdf&quot;&gt;Subcontinuations&lt;/a&gt; Subcontinuations在文中出现了多次, 不太理解, 这个是出处&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html&quot;&gt;C语言的协程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://swtch.com/libtask/&quot;&gt;libtask&lt;/a&gt; 一个协程库, C 语言&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xmailserver.org/libpcl.html&quot;&gt;libpcl&lt;/a&gt; 同样的, C语言协程library&lt;/li&gt;
&lt;li&gt;关于范型for还是推荐&lt;a href=&quot;http://www.lua.org/pil/7.html&quot;&gt;Programming in Lua: Generic for&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
  <entry>
    <title>如何交换两个数</title>
    <link href="http://forestgump.me/2013/01/c-swap-two-variable/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-09T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/c-swap-two-variable</id>
    <content type="html">&lt;h2&gt;1. 故事是这样的&lt;/h2&gt;

&lt;p&gt;这次发现源于写一个全排列生成器, 很容易做到的办法当然是使用递推关系: n个数的全排列等于n个{n-1}个数全排列之和.
于是用lua开始写了:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- 全排列生成器&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;permgen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;printResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
           &lt;span class=&quot;cm&quot;&gt;--[[ n个数的全排列可以看作是n个{剩下n-1个数}的全排列.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;               然后递归即可&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          --]]&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;-- put i-th element as the last one&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;-- generate all permutations of the other elements&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;permgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;-- restore i-th element&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;io.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;io.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;permgen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然OK了, 然后我想还是用C写一个然后Lua调用玩玩.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%2d &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pergen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define SWAP(x, y) x = x - y; y = y + x; x = y - x;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 1. swp&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SWAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 2. 生成这n-1个数的全排列&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pergen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 3. 还原这个Set&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SWAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;pergen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;一模一样的啊, 可是编译怎么会这样???&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@VAN9OGH &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./a.out 
 0  2  3 
 0  0  3 
 0  0  3 
 0  0  3 
 0  0  0 
 0  0  0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后终于发现, 原来这个版本的swap, 不能交换swap(x, x), 而且x, y异号时容易溢出.&lt;/p&gt;

&lt;h2&gt;2. 如何交换两个数&lt;/h2&gt;

&lt;p&gt;以前看谭浩强那本C语言书的时候发现&lt;strong&gt;用异或操作可以不用第三个变量就交换两个数&lt;/strong&gt;, 后来学习算法的时候又学会了一种, 到目前为止, 我可以写出四种原理不同的swap.&lt;/p&gt;

&lt;h3&gt;1. 普通的方法(不写了, 相信你能想到)&lt;/h3&gt;

&lt;h3&gt;2. 异或版本&lt;/h3&gt;

&lt;p&gt;异或版本的本质是通过比较a和b的差异然后存储在某一个变量中, 于是在我手中的是一个差异和某一个变量, 那么我就可以还原出来另一个变量.这个让我想起了SVN等基于差异的版本控制系统, 以及图像处理中的优化, 通过比较差异我们这个原理我们可以做很多的事情.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;局限性&lt;/strong&gt;: swap(&amp;amp;x, &amp;amp;x)是不行的&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 1. 写法1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. 写法2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 相减, 相加版本&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果知道了a+b和a那么我就知道b&lt;/li&gt;
&lt;li&gt;如果知道了a-b和a那么我也知道b&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;局限性&lt;/strong&gt;: swap(&amp;amp;x, &amp;amp;x)是不行的, 另外对于a+b版本, a和b同号会溢出, 对于a-b版本, a和b异号会溢出.(这个很好想, 因为一个变量容纳不了它们之和)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a+b&lt;/strong&gt;版本&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;a-b&lt;/strong&gt;版本&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. 利用运算符的优先级, 一行就够了!&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这行代码实在是很难让人理解, 我们先看汇编之后的结果:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;test.c&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;test.i&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt; .globl  main
main:
;--------------------------------------------------
    ; 前三行是在函数开始时候很典型的代码
    ; 1. 保存ebp寄存器
    pushl   %ebp
    ; 2. 将当前栈指针esp赋值给ebp
    movl    %esp, %ebp
    ; 3. 调整栈指针, 向下移动16个字节, 给局部变量留出空间
    subl    $16, %esp
;--------------------------------------------------
    ; 下面5行用来初始化
    ; 将10赋值给 %ebp - 8的位置
    movl    $10, -8(%ebp)
    ; 将20赋值给 %ebp - 4的位置
    movl    $20, -4(%ebp)
    ; 将%ebp - 4 中的数字(也就是20)赋值给寄存器eax
    movl    -4(%ebp), %eax
    ; 将%ebp - 8 中的数字(也就是10)赋值给寄存器edx
    movl    -8(%ebp), %edx
;--------------------------------------------------
    ; 先计算p = p+q-(p = q)中的p+q部分
    ; 10+20结果保存在edx中 (%edx) = 30
    addl    %eax, %edx

;--------------------------------------------------
    ; 再计算p = p+q-(p = q)中p=q的部分
    ; 将%eax寄存器中的值再次赋值为10
    movl    -8(%ebp), %eax
    ; 将%ebp - 4 位置的值修改为10
    movl    %eax, -4(%ebp)
;--------------------------------------------------
    ; 然后计算两个部分之差
    ; 将%eax中的值修改为%edx中的30
    movl    %edx, %eax
    ; 后面的减去前面的结果赋值给%eax, 30-10=20, %eax中的值为20
    subl    -4(%ebp), %eax
;--------------------------------------------------
    ; 最后在执行最左边的赋值
    ; 将%eax中的20赋值给%ebp-8
    movl    %eax, -8(%ebp)
;--------------------------------------------------
    ; 将%eax归零
    movl    $0, %eax

    ; 返回, 最终%ebp - 8 地址内的值为20
    ;           %ebp - 4 地址内的值为10
    leave
    ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每一行的意思都写出来了, 最终完成了交换, 奇怪的是我们并没有通过什么差异的思想来交换啊, 为什么也能够交换呢, 这个和C语言的结合顺序有关, 对于p+q - (p = q), 先计算的是p+q, 然后再计算(p=q), 因此p并没有丢失, 最终还在寄存器中存着呢!&lt;/p&gt;

&lt;p&gt;这个虽然没有swap(&amp;amp;x, &amp;amp;x)的局限性, 但是还是存在溢出的风险.以及编译器实现上的差异导致的问题, 因此把玩把玩即可, 千万不要用在项目中, 其实还是常规的思路最靠谱!&lt;/p&gt;

&lt;h2&gt;3. 参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://stallman.blogbus.com/logs/18582675.html&quot;&gt;AT&amp;amp;T Assembly :HelloWorld.s&lt;/a&gt; 介绍了一点汇编知识, 写的不错!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lua学习笔记(1)</title>
    <link href="http://forestgump.me/2013/01/lua-oop/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-05T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/lua-oop</id>
    <content type="html">&lt;p&gt;今天确实看了相当多的概念, 堆栈快溢出了;-) 从&lt;a href=&quot;https://github.com/cloudwu/skynet&quot;&gt;skynet&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;, &lt;a href=&quot;http://www.w3school.com.cn/xsl/index.asp&quot;&gt;XSLT&lt;/a&gt;, 元编程, Lua Coroutine, lua_next, lua stack, 并行状态机(psm), 到&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/MUD&quot;&gt;MUD&lt;/a&gt;, &lt;a href=&quot;http://zguide.zeromq.org/page:all&quot;&gt;zeroMQ&lt;/a&gt;, &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;, Lua oop 等等. 本来打算开始看Lua源码的, 不过走到这里才发现还是从熟悉语言本身开始.&lt;/p&gt;

&lt;h2&gt;值得写下来的几点有:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;lua_next函数&lt;/li&gt;
&lt;li&gt;并行状态机&lt;/li&gt;
&lt;li&gt;元编程&lt;/li&gt;
&lt;li&gt;Lua中冒号和‘.’的区别&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;1. lua_next函数&lt;/h2&gt;

&lt;p&gt;这个函数确实花费了我一些时间的. lua中有时候压栈的是一个table, 由于table本身有很多的类型, 虽然lua C API提供了众多的操作栈的函数, 但是设计者还是再添一笔, 这就是lua_next, 这个函数的执行逻辑是这样的:&lt;/p&gt;

&lt;p&gt;除了&lt;strong&gt;// do something&lt;/strong&gt; 那部分, 剩下的整个构成了函数lua_next&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;while (弹出key) {
        压入table中下一个key 和 value 两个
        
        // do something

        弹出value
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于一开始需要弹出一个key, 于是通常情况下我们需要预先压入一个nil, 然后再操作, 连起来就是这样:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;     &lt;span class=&quot;c1&quot;&gt;// 初始栈: [ table ], table: { name = &amp;quot;LiuPeng&amp;quot;, id = 1 }&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;lua_pushnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* first key */&lt;/span&gt;
     &lt;span class=&quot;cm&quot;&gt;/* 第二个参数指的是table在栈中的位置&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       这里我们假设栈中为[ table, nil ],&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       这时1和-2是一个意思&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 也可以写成 : while(lua_next(L, -2) != 0) {&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s - %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;lua_typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;lua_typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;事实上table本身并没有发生变化, 迭代完成和栈又恢复原状: [ table ]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们来一个完整的demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lua_next.c&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lua.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lualib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lauxlib.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define STACKSCREENSHOT(Code) (Code), _StackPrint(L)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_StackPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_gettop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 获得当前栈的elements个数&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; nElements = %d, [ &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;J&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;J&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_isnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %s &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; ]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 完整的lua_next描述为:&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;   while (弹出key) {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       压入table中下一个key &amp;amp; value&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       // do something&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;       弹出value&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   }&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;table_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_newstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;luaL_openlibs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;luaL_loadfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.lua&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lua_getglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;testtab&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_gettop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pushnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;STACKSCREENSHOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STACKSCREENSHOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Settings[%s] = %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;--------------------------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pushnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;STACKSCREENSHOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STACKSCREENSHOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Settings[%s] = %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;STACKSCREENSHOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;test.lua&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;testtab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MsgCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ok&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 并行状态机psm&lt;/h2&gt;

&lt;p&gt;以前写web服务器的时候就对epoll+状态机感到头疼, 因为有时候会出现递归调用, 加上锁、内存管理, 会发现即使有valgrind这样的好工具, 依旧难办, 不过今天不是讨论这个的, 我们来看一个新奇的概念:并行状态机, 也就是在状态机中出现多个状态同时执行, 其实只要用多进程fork就可以办到.我写了一个C版本的.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define SHOW() printf(&amp;quot;[DEBUG] %d show input: %c\n&amp;quot;, __LINE__, input)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LISTEN (input = getchar()), getchar(); switch(input) {&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define END }&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LISTEN&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;:
                &lt;span class=&quot;n&quot;&gt;LISTEN&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;:
                        &lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;:
                        &lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;:
                        &lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// end A&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;:
                &lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;LISTEN&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;:
                &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;LISTEN&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;:
                        &lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;:
                        &lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// child exit&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;:
                &lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可能一下子很难理解, 读者不必关心逻辑, 因为这只是举个例子, 我们关注fork的位置, 然后将代码编译运行看看结果.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@VAN9OGH &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./a.out 
A
B
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 20 show input: B
F
H
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 41 show input: H
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 46 show input: H
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们看到的是, 41， 46行代码同时执行了, 这只是一个思路, 供以后参考!!&lt;/p&gt;

&lt;h2&gt;3. 元编程&lt;/h2&gt;

&lt;p&gt;类似与道家认为的几大元素一样:金、木、水、火、土, 又或者原子一样, 我们的自然界表现虽然很丰富, 但是构建整个世界的基本物质就是这些, 编程语言也一样, 虽然语言本身可以做很强大的事情, 但是在当前这样的计算机体系结构下, 基本元素就那些, 虽然鸡生蛋、蛋生鸡很难有结果, 但我们可以理解为鸡和蛋就像量子的所说的叠加态一样, 它们是相互影响的.&lt;/p&gt;

&lt;p&gt;对于元编程我的理解是能够重新定义基本操作的能力.c++的template, 重载, lua中的oop, &lt;a href=&quot;http://manual.luaer.cn/2.8.html&quot;&gt;元表&lt;/a&gt;就是利用了这一特性.&lt;/p&gt;

&lt;h2&gt;4. Lua中Colon(冒号)和dot(点)有什么区别&lt;/h2&gt;

&lt;p&gt;最终我在&lt;a href=&quot;http://book.luaer.cn/_96.htm&quot;&gt;这里&lt;/a&gt;发现了这一点, 简单点说lua用冒号隐藏了self参数, 方便了oop.&lt;/p&gt;

&lt;h2&gt;5. 参考 &amp;amp; 资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cloudwu/skynet&quot;&gt;skynet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/xsl/index.asp&quot;&gt;XSLT&lt;/a&gt; XSLT在XML中, 类似于CSS之于HTML&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/MUD&quot;&gt;MUD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zguide.zeromq.org/page:all&quot;&gt;zeroMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; key-value键值存储&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://manual.luaer.cn/2.8.html&quot;&gt;元表&lt;/a&gt; Lua中对元表的介绍&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
  <entry>
    <title>How to use Lua and C together</title>
    <link href="http://forestgump.me/2013/01/lua-and-c/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2013-01-04T00:00:00+08:00</updated>
    <id>http://forestgump.me/2013/01/lua-and-c</id>
    <content type="html">&lt;p&gt;最近在学习Lua, 这是一门简单而又强大的脚本语言, Lua在11年6月份的时候曾经进入toibe前10名, 现在稳定在&lt;a href=&quot;http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html&quot;&gt;18名左右&lt;/a&gt;, 其实排名是无所谓的, 学习一门脚本语言的目的是对C语言的扩展和补充, 在做项目的过程中, 明显感觉到了单单使用C语言的不足. 本文主要是总结Lua和C语言怎样交互.我们关注的是:&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;在C中调用Lua&lt;/li&gt;
&lt;li&gt;在Lua中调用C&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单的C调用Lua是不需要使用栈API的, 直接luaL_dofile(..)即可, 但是当我们需要将参数在两种语言之间传来传去的时候, 栈的功效就体现出来了, 我们可以理解为lua和C之间使用栈进行通信.而lua C API提供给了我们丰富的&lt;a href=&quot;http://www.lua.org/manual/5.2/manual.html#4&quot;&gt;接口&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;1. 在C中调用Lua(embedding)&lt;/h2&gt;

&lt;h3&gt;a) Demo1&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;luadd.c&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lua.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lualib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lauxlib.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;luaadd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_getglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 先将lua脚本中的add函数压栈&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 再将两个参数压栈&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 调用lua脚本中的add函数, 2表示参数个数, 1表示结果个数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_tointeger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 索引为-x表示栈顶的x位置, 索引为x表示栈底的x位置&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 弹出1个元素, 1表示弹出的元素个数&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_newstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 在lua5.2中不支持lua_open, 因此使用luaL_newstate()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;luaL_openlibs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 将lua标准库载入L&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;luaL_dofile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add.lua&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 载入并运行lua脚本add.lua&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaadd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 运行luaadd函数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The sum is %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 释放L&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;add.lua&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@VAN9OGH &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc luadd.c -llua -ldl -lm
van9ogh@VAN9OGH &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./a.out 
Hello World

The sum is 25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;b) Demo2&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;test.c&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lua.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lualib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lauxlib.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 这种就是直接调用, 没有用到间接的函数包装&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_newstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 载入lua标准库 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;luaL_openlibs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 正常情况下, lua_pcall和lua_call一样, 不同的&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      是最后一个参数.其中第二个0表示返回值个数为0&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      这句话是说:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        1. 正确情况下luaL_loadfile返回0, 并且执行lua_pcall&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        2. 错误情况下, 直接运行{}块中Code&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;luaL_loadfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.lua&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;cm&quot;&gt;/* 错误会被压入栈顶, 不过需要将它转化为字符串 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;error: %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 将f函数入栈 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_getglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 检查入栈的是否为函数 */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_isfunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 传入两个参数21, 31 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 执行函数, 2表示有两个参数, 1表示有一个返回值, 0表示没有错误&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      等价于lua_call */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;error running function `f&amp;#39;: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 检查返回值是不是一个数字, 一旦lua_pcall运行完毕, 函数和另外的参数&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      就被自动的弹出了栈, 因此栈中的内容将是返回值 */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_isnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;function `f&amp;#39; must return a number&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 将栈顶中的内容转化为double */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tonumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Result: %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 弹出栈中一个元素 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 释放L */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;test.lua&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;math.sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;c) Demo3&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;luatest.c&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lua.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lualib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lauxlib.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_newstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;luaL_openlibs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;luaL_dofile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo.lua&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Allright we are back in C.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;foo.lua&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;nb&quot;&gt;io.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Please enter your name: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;io.read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- read input from user&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Hi &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, did you know we are in lua right now?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果编译出现问题, 主要存在以下几点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;本文针对lua5.2, lua5.1中应该将luaL_newstate()改为lua_open()&lt;/li&gt;
&lt;li&gt;lua中需要环境变量LUA_DIR, LUA_CPATH, LUA_PATH, 如果没有设置可以参考:&lt;/li&gt;
&lt;li&gt;上面编译时添加的选项-ldl, -lm, -llua不要少&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;.bashrc&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LUA_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/local/lib/lua/5.2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LUA_CPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;?.so;$LUA_DIR/?.so&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LUA_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;?.lua;$LUA_DIR/?.lua&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 在Lua中调用C函数(expanding)&lt;/h2&gt;

&lt;p&gt;其实要想让Lua能够调用C函数, 按照常理我们需要将C代码编译成.so文件, 然后用Lua加载即可, 事实上Lua也是这么做的, 有几个关键函数需要说明:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;声明&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_CFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注册&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 第三个参数是一个lua_CFunction函数指针&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lua_register&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;lua_CFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 第三个参数是一个struct&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_Reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lua_CFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_Reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;luaL_register&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_Reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 这个函数用户dlopen查询, 用户只需要按照这个格式书写, 最后的命名也要是XXX.so&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaopen_XXX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;a) Demo1&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;sayhello.c&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lua.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lualib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;lauxlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_SayHelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_gettop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lua_pushstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2013&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_pushstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0101&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;luaopen_sayhello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lua_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sayhello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SayHelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;sayhello.lua&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sayhello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;time1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayhello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LiuPeng&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;编译&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@VAN9OGH &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc -o sayhello.so sayhello.c -shared -llua -ldl -lm
van9ogh@VAN9OGH &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lua sayhello.lua
LiuPeng Hello World!
2013    0101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很好用吧~&lt;/p&gt;

&lt;h2&gt;3. 总结&lt;/h2&gt;

&lt;p&gt;lua很容易嵌入C/C++, 它使用了栈来让脚本语言和C/C++通信, 因此学习lua我们应该了解lua C API的使用, 这样将帮助我们expanding和embedding这门语言, expanding注重将底层C/C++实现的各种功能由lua来调用, 而embedding注重的是在C/C++语言中调用lua, 比如说nginx的lua模块就是干这个的, 这样的好处是我们可以用脚本来无限扩展程序的逻辑, 缺点是底层代码依赖于上层的脚本, 这也就是为什么lua在embedding中会处于完胜的地位, 因为它足够小, 那么这个缺点很大程度上被掩盖, 相比与那些大而全的语言如python, 最近正好要将smartwin的项目GSM接收模块进行重写, 希望Lua能够帮到忙.&lt;/p&gt;

&lt;h2&gt;4. 参考&amp;amp;资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Lua_programming_language#Stack&quot;&gt;lua wiki stack部分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twistedmatrix.com/users/glyph/rant/extendit.html&quot;&gt;Extending Vs. Embedding&lt;/a&gt; Python更适合expanding而Lua两者是兼备的.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lua-users.org/wiki/LuaVersusPython&quot;&gt;Lua Versus Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python.org/2/extending/index.html&quot;&gt;Extending and Embedding the Python Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swig.org/Doc1.3/Lua.html&quot;&gt;SWIG and Lua&lt;/a&gt; 有时候还是需要SWIG的, 特别是大规模自动化任务&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://julien.danjou.info/blog/2011/why-not-lua&quot;&gt;Why not Lua &lt;/a&gt; 忠言逆耳&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://findfunaax.com/notes/file/82&quot;&gt;Lua 栈操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lua.org/manual/5.2/manual.html&quot;&gt;lua5.2 manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lua.org/manual/5.1/manual.html&quot;&gt;lua5.1 manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gamedevgeek.com/tutorials/calling-c-functions-from-lua/&quot;&gt;Calling C++ Functions From Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/zester/wiki/Lua_C&quot;&gt;How to use Lua and C together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gamedev.net/page/resources/_/technical/game-programming/an-introduction-to-lua-r1932&quot;&gt;lua introduction(注意stack部分)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lua.org/pil/index.html&quot;&gt;Programming in Lua5.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lua-users.org/wiki/BuildingModules&quot;&gt;Building Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.luaer.cn&quot;&gt;lua5.1编程(中文)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codingnow.com/temp/readinglua.pdf&quot;&gt;云风Lua5.2源码欣赏&lt;/a&gt; 这个很难得, 推荐!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;5. 代码下载&lt;a href=&quot;/code/lua/lua-c-allinone.tar.gz&quot;&gt;allinone.tar.gz&lt;/a&gt;&lt;/h2&gt;
</content>
  </entry>
  
  <entry>
    <title>jekyll</title>
    <link href="http://forestgump.me/2012/12/markdown/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-12-31T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/12/markdown</id>
    <content type="html">&lt;h3&gt;Background&lt;/h3&gt;

&lt;p&gt;这次将博客进行了改版, 还是使用jekyll, 看来程序员都喜欢trade-off :) 这次主要比较了reStructedText、Textile、Markdown等标记语言, 对语法高亮进行了调整, 这个过程让我对jekyll的工作机制有了一些了解。学习了很多新的名词: liquid,       YAML Front Matter, R, lyx, pygments, rdiscount, redcarpet等等.&lt;/p&gt;

&lt;p&gt;ruby的世界真的很奇特, 对于我这个古老的C程序员确实需要适应, 按照我的逻辑, 完成这样一个可以通过设计博客模版然后专心写txt文件, 用Git管理站点的方式, 确实是一个浩大的工程(关注的方方面面颇多):模版、标记语言、插件管理、版本控制, 如果都是C语言来写, 可能要吐血.&lt;/p&gt;

&lt;p&gt;jekyll的核心其实就是上面说到的几个方面, 但它更像是一个裁缝, 因为开源社区已经做的很好了.&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;模版引擎

&lt;ul&gt;
&lt;li&gt;liquid&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标记语言:

&lt;ul&gt;
&lt;li&gt;markdown&lt;/li&gt;
&lt;li&gt;textile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语法高亮

&lt;ul&gt;
&lt;li&gt;pygments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本控制

&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;而且ruby本身又有内置的web服务器, 因此其实工具已经不缺了, 然后大家的需求是一个很灵活的带版本控制的静态博客站点, 于是jekyll将用户写的带标记的txt(可看作是数据流), 经过上面这些工具的颠三倒四的折疼, 输出了一个static site!&lt;/p&gt;

&lt;h3&gt;模版引擎: Liquid template engine&lt;/h3&gt;

&lt;p&gt;在使用语法高亮的时候我们会这么写:{&lt;em&gt;% highlight cpp &lt;/em&gt;%}, 这个就是liquid模板引擎的语法, jekyll的liquid tags我们我们看&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;这里&lt;/a&gt;, 和&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/liquid-extensions&quot;&gt;这里&lt;/a&gt;比如本博客的index.md、&lt;em&gt;layouts/page.html、&lt;/em&gt;layouts/post.html就是模版.&lt;/p&gt;

&lt;h3&gt;轻量级标记语言: Light Markup Language&lt;/h3&gt;

&lt;p&gt;其实标记语言并不是要和html语言比个高低, 提出它主要是为了方便我们去编写文档, 因为html页面虽然很强大, 但是那是有浏览器解析的结果, 背后的web代码既冗余又无法理解.轻量级的标记语言有很多, 不同的语言社区主推的都不一样, 比如python社区可能更熟悉reStructedText, jekyll没有去追求大而全, 它主要支持Markdown、textile. 这两种语言本身的解析器实现有很多, Wiki上有列举, 对于Markdown, 支持rdiscount、Marrku、redcarpet(jekyll 0.2.x), 对于textile, 支持redCloth.目前github通过扩展markdown, 推出的redcarpet貌似很流行(&lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;GFM&lt;/a&gt;), rdiscount也不错. 虽然Markdown支持者众多(可以看一下&lt;a href=&quot;http://www.yangzhiping.com/tech/r-markdown-knitr.html&quot;&gt;这里&lt;/a&gt;, &lt;a href=&quot;http://www.codinghorror.com/blog/2012/10/the-future-of-markdown.html&quot;&gt;这里&lt;/a&gt;) 但也有人为它担忧, 主要是太过简陋, 标准不一, 读者可以看一下&lt;a href=&quot;http://blog.liancheng.info/why-i-hate-markdown/#.UOFBNvLsOxI&quot;&gt;这里&lt;/a&gt;, 还有&lt;a href=&quot;http://www.ituring.com.cn/article/8648&quot;&gt;这里&lt;/a&gt;.笔者最终选择的是rdiscount解析器, 它是&lt;a href=&quot;http://www.pell.portland.or.us/~orc/Code/discount/&quot;&gt;discount&lt;/a&gt;的ruby实现.&lt;/p&gt;

&lt;h3&gt;语法高亮: pygments&lt;/h3&gt;

&lt;p&gt;笔者一开始认为语法高亮是使用什么js做的, 后来怎么也找不到highlight.js, 倒是找到了highlight.css, 甚是诧异, 虽然语法高亮可以通过js来做, 而且有很多优秀的实现, 也都很强大.但其实jekyll是通过python的&lt;a href=&quot;http://pygments.org/&quot;&gt;pygments&lt;/a&gt;来做的, 用户只需要载入相应的highlight.css样式给jekyll, 它就可以对相应的block进行代码高亮了.于是我们只需要:{&lt;em&gt;% highlight &lt;/em&gt;%} {&lt;em&gt;% endhighlight &lt;/em&gt;%}, 代码就高亮了, 如果读者有兴趣, 可以下载&lt;a href=&quot;https://github.com/mojombo/jekyll/tree/master/lib/jekyll&quot;&gt;jekyll&lt;/a&gt;代码,在jekyll/lib/jekyll/tags/highlight.rb中就可以看到这个调用过程了.&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;

&lt;p&gt;其实静态网站生成工具有很多, 可以看看&lt;a href=&quot;http://iwantmyname.com/blog/2011/02/list-static-website-generators.html&quot;&gt;这里&lt;/a&gt;, 还有&lt;a href=&quot;http://www.mickgardner.com/2012/12/an-introduction-to-static-site.html&quot;&gt;这篇&lt;/a&gt;普及性的.从这样的工具的出现我们不难发现:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们都在慢慢的将Machine和人类能做的事情进行区分开来, Machine擅长重复性的, 程序化的工作, 而人类则更擅长创造性的、设计性的工作, 我们需要的是利用这一点, 帮助我们在苦短的人生中节约时间, 创造价值.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;每一种语言都有它存在的道理, 脚本语言更擅长于处理string, 灵活性较高, 而底层的C语言更注重的是效率, 完成一些和操作系统密切相关的工作.因此我们不应该只学一门语言, 而要使用脚本语言帮我们完成日常的小任务, 使用底层语言帮我们处理效率上的问题, 遵循UNIX哲学, 通过组合而不是继承来解决问题!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;参考文献&lt;/h3&gt;

&lt;p&gt;有了上面的介绍, 我想对于搭建这样一个静态博客应该没有什么难度了:)下面推荐一些写的好的jekyll入门指导&lt;/p&gt;

&lt;h4&gt;QuickStart&lt;/h4&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.soimort.org/posts/101/&quot;&gt;像黑客一样写博客——Jekyll入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;Jekyll Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://recursive-design.com/blog/2010/10/12/static-blogging-the-jekyll-way/&quot;&gt;Static blogging the Jekyll way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;Markdown&lt;/h4&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.worldhello.net/gotgithub/appendix/markups.html&quot;&gt;worldHello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wowubuntu.com/markdown&quot;&gt;Markdown 语法说明 (简体中文版)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown 语法说明 (English Edition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://microjo.github.com/work/markdown_ext.html&quot;&gt;python-markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.yanxyz.net/php-markdown-extra-description.html#header-id&quot;&gt;PHP Markdown Extra说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;Liquid&lt;/h4&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://robots.thoughtbot.com/post/159806314/custom-tags-in-liquid&quot;&gt;Custom Tags in Liquid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/liquid-extensions&quot;&gt;liquid-extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript入门经典读书笔记</title>
    <link href="http://forestgump.me/2012/12/Beginning-JavaScript-3rd-edition/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-12-31T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/12/Beginning-JavaScript-3rd-edition</id>
    <content type="html">&lt;p&gt;最近刚好在迁移博客, 想解决博客的全文搜索问题, 当然最好是用JS来做啦, 况且我已经发现了使用JQuery做的demo, 于是翻来Beginning JavaScript, 了解一下, 其实一直想了解一下这门活在浏览器中的唯一语言, 它是怎么样和HTML, CSS结合起来, 将Web变得如此强大的.&lt;/p&gt;

&lt;h3&gt;P0-173&lt;/h3&gt;

&lt;p&gt;前面写的很好, 读的很快.基本上讲了基本的程序结构:循环、分支、顺序, 又提到了若干JS内置对象:Array, String, Data, Number, Math, 以及浏览器的文档对象模型DOM: window, history, location, navigator, screen, document.&lt;/p&gt;

&lt;h3&gt;P173&lt;/h3&gt;

&lt;p&gt;浏览器页面上每一个img对象都保存在images[]数组中, 对于页面上的第一副图片, 用数组document.images[0]表示, 以此类推.img对象的属性就包括src、id等等属性, 这样就将HTML标记语言中的属性和JS对象很好的结合在了一起!&lt;/p&gt;

&lt;h3&gt;P248&lt;/h3&gt;

&lt;p&gt;使用&lt;frameset&gt;来定义框架集, 使用&lt;frame&gt;来标记框架, 对于一个不包含框架的页面来说, 仅存在有一个window对象, 但对于包含框架集页面来说, 页面的每一个框架都具有一个相应的window对象.除了包含框架集的顶层窗口的window对象之外, 每一个框架的window对象都是其父框架的window对象的子对象.我想似乎可以利用这一点做一个dummy框架集, 隐藏起来, 帮我们记录一些信息.&lt;/p&gt;

&lt;h3&gt;P268&lt;/h3&gt;

&lt;p&gt;window对象的open()方法用来打开一个新的tab, 还可以返回这个新的tab的window对象引用, 关闭这个tab我们可以使用close()方法&lt;/p&gt;

&lt;h3&gt;P275&lt;/h3&gt;

&lt;p&gt;这一节讲到了一个重要的方法, 用于在打开一个新窗口以后, 新窗口和老窗口之间的通信.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>TinyOS: MagXC.nc</title>
    <link href="http://forestgump.me/2012/12/tinyos-sensorboards-mts300cb-magx/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-12-14T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/12/tinyos-sensorboards-mts300cb-magx</id>
    <content type="html">&lt;h2&gt;说明&lt;/h2&gt;
&lt;p&gt;本来想继续翻译Philip Levis那篇文章的, 不过对于ADC其实我并不是太理解, 所以还是先探究一下tos/sensorboards/mts300下的组件.下面我们选择tos/sensorboards/mts300/MagXC.nc来探究一下, 看看到底为什么我们只需要call MagX.read数据就出来了?其实这中间走了许多层, 出现了若干我们未知的领域.分析完以后我们自己通过纯手写一个底层的nesC源代码烧到micaz节点上, 看看是不是和我们预期所想的一样. 我想这种探究还是很有意思的.&lt;/p&gt;
&lt;h3&gt;MagXC.nc&lt;/h3&gt;
&lt;p&gt;这是一个HIL层的地磁场传感器的读取接口, 用户只需要将read接口连接上去即可, 非常的易于使用, 我们先来看看内部的实现:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;mts300.h&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MagXC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UQ_MAG_RESOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagReadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MagConfigP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdcReadClientC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdcX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Mag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagReadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagReadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MagX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MagReadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActualX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdcX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AdcX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Atm128AdcConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagConfigP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实TinyOS的代码是很好理解的, 只是有时候会将初学者跳晕掉, 太多的配线了, 我们不理解的是为什么解决一个问题要这么麻烦, 干嘛搞这么多的配线啊.其实只要我们理解了这其中的模式, 知道了每一个组件所处的层次, 也就明了了:有时候不是非要这么多配线, 这就是设计层面上的优雅性了, 作者只是将功能很好的分了一个层次. 这样的设计到底好不好, 我们也无法评判, 毕竟传感器网络操作系统的设计, 没有什么可以借鉴的, 很多决策都是在不可预知的情况下作出的.扯远了.&lt;/p&gt;
&lt;p&gt;我们发现这个组件内部全是configuration, 没有module, 那么说明这一层面上所需要的条件都已经具备了, 只需要配置一下就可以了, 不需要写真正的代码.因此写这样的代码就对读者提出了一个要求:你要明白你想要什么以及你通过什么达到这样的目的.这基本就是TinyOS接口所要表达的意思了.比如这个例子:我们希望能够读取这个传感器的数据, 而且最好还能对传感器获取传感器的一些设置.那么我们必须要找到这样功能的组件能提供类似于Read和Mag接口, 幸运的是这货还真有:MagReadP.nc但是新的问题出现了, 这个组件还需要配置接口ActualX, 如果我们查看这个组件内部, 发现其实这个组件只是帮我们解决了Mag接口的需求, 但是Read接口它也不会, 它只是做了一个代理仍给了别人, 并且把它换了一个包装叫做:ActualX(还蛮真诚的), 那么到底谁会提供真正的读取传感器数据的功能呢?我们找到了AdcReadClientC.nc, 这下好了问题基本解决了, 只是这家伙还需要一个接口Atm128AdcConfig接口, 大概和芯片的配置有关, 我们得找找了, 幸好, 这就是MagConfigP.nc, 这个组件没有再uses什么其它的接口, 任务就完成了, 松了一口气.接下来实际上就是将我们找到的这些组件配在一起, 就OK了.&lt;/p&gt;
&lt;p&gt;有些读者觉得这简直就在糊弄人, 这种分析方法只是自顶向下的, 前提是你必须是糕富帅, 你要什么有什么, 其实笔者只是提供了这样一个思路, 说明TinyOS的这种设计哲学, 这恰恰和真实社会的组织结构非常相似, 这就是社会分工, 每个人都或多或少的能够为别人提供一些服务, 同时他也需要借助别人的力量, 在TinyOS这个世界里, 我们就像BOSS一样, 我们有很多这样忠实的组件, 我们需要做的事情就是发挥BOSS的作用.读者如果从现实社会中走一遭, 或许会发现还是代码的世界乐趣多:), 其实相对于这些代码的复杂度是没法和现实社会的复杂度所相比的.因此我们不要抱怨学习一个新的工具又是一大陀文档啊什么的, 要从根本上热爱他们!比如tinyos的官方文档http://www.tinyos.net/tinyos-2.1.0/doc/nesdoc/micaz/, 其实每一个配线图都是一张社交图谱, 它们就活跃在你的眼皮底下, 不要错过他们!社会分工其实在什么年代都不会消亡, 即使在遥远的未来, 只是那时人换成了机器, 或许那时我们的文档上的组件换成了真正的AI机器, 程序员的编程方式发生了根本的改变.&lt;/p&gt;
&lt;p&gt;从这个角度来说, 我们就不再困惑为什么配线图这么复杂, 也就明白了构建大型的软件是需要时间的, 可能包括一些重构, 我们要做的就是利用这种架构快速的开发自己的应用, 并在喝咖啡的时候, 从美学角度审视她, 观察她的每一个部分, 深入进去.我想这就是为什么对于一个设计的优美的软件系统程序员会发疯, 一旦理解了其中的精髓, 我们会被深深的迷住.&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;caps&quot;&gt;ADC&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;忘了我们今天的主题是讨论ADC, 我们继续:)&lt;/p&gt;
&lt;p&gt;从上一段的讲述中我们得知MagXC.nc Read接口部分是AdcReadClientC.nc做的, 我们继续发现:&lt;/p&gt;
&lt;p&gt;果不其然, 这个文件在tos/chips/atm128/adc中, 按照上一节的方法, 我们发现&amp;quot;真正&amp;quot;提供Read功能的组件来自WireAdcP.nc, 对于其它组件我们不再驻足观看, 而WireAdcP.nc的Read来自AdcP.nc, 然后发现AdcP.nc也是做了代理, 最终和两个文件相关:&lt;/p&gt;
&lt;p&gt;Atm128AdcP.nc和HplAtm128AdcP.nc, 之所以不再说一个文件, 因为再继续查看下去会到达中断处理函数, 其实最终读取数据并不是都是那个函数在干, 还需要上一层的组件来配置一下寄存器, 或许还要开启一些中断, 基本上就是这样了, 接下来我们详细剖析这两个组件.&lt;/p&gt;
&lt;h3&gt;Atm128AdcP.nc &lt;span class=&quot;caps&quot;&gt;AND&lt;/span&gt; HplAtm128AdcP.nc&lt;/h3&gt;
&lt;p&gt;我们来看核心代码:&lt;br /&gt;
上层应用程序的Read需求经过层层代理转发, 到达了这一层的一个函数:(Atm128AdcP.nc), 我进行了注释.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refVoltage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftJustify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Atm128Admux_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// ADMUX 寄存器&lt;/span&gt;
			
		&lt;span class=&quot;n&quot;&gt;Atm128Adcsra_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ADCSR 寄存器&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;admux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HplAtm128Adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAdmux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;precise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPrecise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refVoltage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;admux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refVoltage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;admux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adlar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftJustify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;admux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HplAtm128Adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAdmux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ATM128_ADC_ENABLE_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adsc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ATM128_ADC_START_CONVERSION_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adfr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ATM128_ADC_INT_FLAG_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// clear any stale flag&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ATM128_ADC_INT_ENABLE_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ATM128_ADC_PRESCALE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		  &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Atm128Calibrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adcPrescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HplAtm128Adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAdcsra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adcsr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Atm128AdcSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refVoltage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					     &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftJustify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refVoltage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftJustify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;precise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在更底层的HplAtm128AdcP.nc我们又发现了中断处理函数:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HplAtm128Adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* A/D interrupt handlers. Signals dataReady event with interrupts enabled */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;AVR_ATOMIC_HANDLER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_ADC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HplAtm128Adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;__nesc_enable_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HplAtm128Adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用avr128的ADC我们需要知道3个寄存器: ADMUX、ADCSRA、SIFOR, ADMUX主要用来设置一些参数,比如参考电压、对齐方式、模拟通道、增益选择.而ADCSRA寄存器主要是用来控制的, 比如使能啊, 中断啊什么的.还有SIFOR则是一个特殊功能寄存器, 主要用在快速ADC中.具体这三个寄存器各个位表示什么意思我就不一个一个说了大家可以去手册查询, 用起来是相当方便的, 一般而言你只需要设置好这三个寄存器, 然后就乖乖的等中断自己到来吧, 当然中断函数你得写好咯.有一个注意点是如果工作在非连续模式下, 转换结束我们要将ADCSRA寄存器的ADEN置为0关闭它, 等待下一次开启.(当然更严谨的还要设置其它位, 不过这个设置好就可以读取数据了).&lt;/p&gt;
&lt;p&gt;参考我们的研究结果, 写一个一步到位的, 巩固一下. 也就是说我们要写驱动啦!&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;caps&quot;&gt;ADC&lt;/span&gt; 例子&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempDeviceP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SoftwareInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SoftwareInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 这里的两句话不是凭空出现的, 读者如果有crossbow的micaz节点&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 和mts300cb传感器背板就知道了, PW0管脚是用来给温度传感器&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 供电的!&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;DDRC&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// PW0位设置为输出&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PORTC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// PW0位设置为High&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 这个是mica tempeature的配置&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ADMUX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 0010 0001&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位7、6 REFS1~REFS0  : 00(以外部AREF为基准比较电压)&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位5                 : 1 (左对齐)&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位4~0 MUX4~MUX0     : 00001(channel1)&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;ADCSRA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ATM128_ADC_PRESCALE_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
							 &lt;span class=&quot;c1&quot;&gt;// 1101 1000&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位7                 : 1 (ADC使能)&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位6                 : 1 (开始转换)&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位5                 : 0 (关闭连续工作模式)&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位4                 : 1 (中断标志)&lt;/span&gt;
		                     &lt;span class=&quot;c1&quot;&gt;// 位3                 : 1  (中断使能)&lt;/span&gt;
			                 &lt;span class=&quot;c1&quot;&gt;// 位2,1,0             : 000 (不开预分频器)&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;SFIOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 不工作在快速模式下&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CLR_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADCSRA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 结束以后手动将ADCSRA的ADEN为置0&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// ADC中断处理函数, 这个是avr-gcc的写法, 后面的hwevent是nesc内部的&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 编译器注释, 表示这是一个硬件中断, 这样它会相应的进行一些处理.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 再后面的@C()则表示这是一个C语言语句, nesc编译器不要对它进行重命名&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG_ADC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hwevent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用我的这个驱动, 我写了一个具体的, 读者可以将基站烧写为BaseStation, 然后将我的adc例子烧到另外一个节点上装上mts300cb传感器, 在pc机上用java net.tinyos.tools.Listen -comm serial@/dev/ttyUSB1:57600命令看看收到的结果, 当然这个adc还只是模拟值, 怎么变换大家自己去找公式咯.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;[下载] &lt;a href=&quot;/code/nesc/adc.tar.gz&quot;&gt;adc.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Experiences from a Decade of TinyOS Development</title>
    <link href="http://forestgump.me/2012/12/experiences-from-a-decade-of-tinyos-development/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-12-13T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/12/experiences-from-a-decade-of-tinyos-development</id>
    <content type="html">&lt;h3&gt;这是什么&lt;/h3&gt;
&lt;p&gt;TinyOS作者之一:philip leveis对TinyOS操作系统10年的发展和展望, 笔者有幸发现这篇文章, 十分庆幸, 只能聆听大师的教诲了!以下是这篇文章的翻译.题目就不翻译了, 不想变了味道. 有些句子加入了自己的理解, 没有严格按照原句剖析主谓宾. 另外, 括号中大多是我个人的注解, 虽然注解多了, 是很令人反感的事情.花了5天终于完成了, 第一次翻译这么长的一篇论文, 总的来说, 对文章整体把握的能力还不是很到位, 因此会让读者有一种凌乱的感觉. 总之, 这个过程让我对TinyOS有了更深刻的认识!&lt;/p&gt;
&lt;h3&gt;Let&amp;#8217;s Begin!&lt;/h3&gt;
&lt;h4&gt;0. 摘要&lt;/h4&gt;
&lt;p&gt;2000年一开始写TinyOS时候, 它的用户只是少数计算机科学的学术研究者, 10年后, TinyOS每年有25000的下载量, 被很多的商业产品所使用, 而且俨然已经变成了一个低功耗无线传感器网络的研究平台.&lt;/p&gt;
&lt;p&gt;我们的关注点在于如何让技术和社会决定影响着这种成功, 有时候确实很令人惊讶.(作者很可能是在说集市的开发模式, 将TinyOS带入了一个快速的开发轨道, 也决定了这种成功的演变), 随着TinyOS的成熟, 它发展出来的语言级的扩展也在帮助用户构建更高效的、更稳定的系统.这些特性和编程抽象很切合嵌入式系统.和其他系统相比, 利用这些特性构建日益复杂的系统将会变得容易些, 这让TinyOS成了用户主要的选择.&lt;/p&gt;
&lt;p&gt;这些成功其实花费了相当长的时间.一个一开始觉得好的设计随着时间的推移将变的不可预见.今天, TinyOS是一个稳定的, 自给自足的生态系统, 但这其实也阻碍了新的用户使用. 对于用户来说, 其他的一些系统比如Arduino和Contiki更易于使用, 这些系统本身已经采用了一些更好的解决方案来面对简单的嵌入式传感器应用.(这段话我一开始觉得会不会是自己翻译错了, 后来想想Philip Leveis的这种担忧不是没有道理, 本人学习TinyOS系统已经整整一年了, 也深深的明白, 对于新手来说入门会很痛苦, 很多设计或许对圈内人士是一个很方便的特性, 但是却将入门的门槛磊的越来越高, 特别是nesC语言和TinyOS系统之间千丝万缕的联系, 让很多初学者摸不着头脑)&lt;/p&gt;
&lt;h4&gt;1. 介绍&lt;/h4&gt;
&lt;p&gt;传感器网络的研究也就10年左右的时间, 起源于小范围的学术机构对小型, 低能量的无线感知设备的研究, 然而今天世界范围内学术研究领域出现了大量的学术会议和期刊论文, 传感器网络已经从一个研究项目成长为商业应用系统, 今天的商业系统包括:基于Ad-Hoc无线智能电表网络, 家庭网络以及工业监控系统.从Cisco(思科)开始谈论&amp;quot;物联网&amp;quot;概念的时候, 这将意味着未来有数百万乃至数十亿的小型网络设备将会交织在一起采集着物理世界的环境, 这就是我们所说的:传感网&lt;/p&gt;
&lt;p&gt;TinyOS是一个专门为这样的嵌入式设备开发的操作系统, 它起源于UC Berkeley 2000年做传感器网络研究, 用Perl脚本自动生成一堆#define声明的年代, 从那时起, 它经过发展开始使用nesC(C语言的一门方言)语言, 经过四次主要的版本迭代, 支持10多种传感器网络平台, 并且今天, 大约每年有25000的下载量, TinyOS是无线传感器网络研究的主要平台, 使数以百计的研究成果得以实现, 它已经使用在了大量的商业产品中, 例如:Zolertia(读者可以到官方网站上看看, http://zolertia.com, MSP430+CC2420搭的), Cisco(思科)的智能电网系统(以前用的是Arch Rock公司的系统, 貌似现在Arch Rock已经被思科收购了, 看看这里http://www.cisco.com/web/about/ac49/ac0/ac1/ac259/archrock.html), 以及people power company(据我所知, 这家公司应该不再继续研究TinyOS了, 显然研究Apple和Android更顺应时代潮流. http://www.peoplepowerco.com/mobile/)&lt;/p&gt;
&lt;p&gt;这篇文章主要解释TinyOS过去这十年是如何发展的, 关于TinyOS成功有两点有趣的解释, 第一, 就像Xen(开源虚拟机)和OpenFlow(这个很有趣, 它是起源於stanford为改革现有以太网数据传输而提出的第二层通信协议http://en.wikipedia.org/wiki/Openflow, 51cto有一个专题: http://network.51cto.com/art/201105/264181.htm 读者不要被它的概念吓坏了, 其实就是用软件来做原本硬件能做的事情, 这样子的案列来有GNU Radio, 这确实是一个趋势), TinyOS也是起源於学术研究项目, 获得重大成功然后开始影响到了学术界之外.同时, 仍然由学术性的研究在管理和推动着这种转变.(我认为作者其实是在表达, 美国的教育和商业之间有趣的关系, 这种正向的反馈系统也是美国教育发达的重要原因). 第二, TinyOS和其他的操作系统不一样的是它是一个成功的、原则性强的、全新的用于新型计算设备的操作系统.&lt;/p&gt;
&lt;p&gt;这篇文章将解释技术和社会化的决定是如何促进而又限制TinyOS的成长, 以及因此而产生的实践, 虽然有时候这种实践以一种不可预见的方式.举个例子:我们知道细粒度组件可以允许用户很容易通过很小的改变来定制操作系统(OS), 因此TinyOS利用这一点来适应大量特殊的应用, 但是正是由于这种细粒度, 导致了阅读如此细小的组件的障碍(作者是想说易读性很差).&lt;/p&gt;
&lt;p&gt;本文将被分成四部分, 第一部份:(Section 2)将描述驱动TinyOS设计的两个基本原则: 第一个是最小资源消耗. 为了生成更小的代码和减少数据占用空间, 这就要求TinyOS应该权衡运行时的灵活性和通用性, 这就和现代的很多&amp;quot;大型(large)&amp;quot;软件系统的设计原则相违背.第二个是要极力的消除BUG. 这个动机主要来自于调试嵌入式设备通常面临着巨大的困难, 这就要求TinyOS的架构设计很难引入BUG, 有时候这会带来一定的开销:用户写正常的代码也变得困难.为了能够支持这些原则, TinyOS的开发人员设计了nesC语言, 它是一门新的C语言方言, 这门语言和TinyOS操作系统一起在演变, 这两者交织在一起, 缺一不可: 也就是说当我们讨论TinyOS的演变时我们指的是TinyOS和nesC语言的演变.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tinyos-decade-1.png&quot; style=&quot;width:600px;height:200px;border:solid 3px #e3e3e3;&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;图1&lt;/h4&gt;
&lt;p&gt;第二部分:(Section 3-6), 我们讨论四种设计上的方案对TinyOS出人意料的影响, 前两个是内存分配和隔离(我觉得这里想说的是nesC新添加的关于interface和components的命名空间),这个和嵌入式设备有关, 后两个是组件和nesC语言的设计, 它们是为了让系统软件更通用. 我们分别作简要介绍:(Section 3) 我们讨论新的语言特性是如何让TinyOS优化RAM的分配, 同时又移除了一些运行时内存访问检查. (Section 4) 第四部分描述一个新的基于这一内存分配，静态虚拟化的软件模式是如何通过使有限状态机的每个虚拟化实例完全独立来降低软件耦合度。(这里确实有点难理解, 读完第四部分就明朗了), (Section 5) 第5部分解释为何nesC对于TinyOS的早期成功是如此重要, 但是也解释了为何nesC的演变也限制了TinyOS更广泛更长期的使用. (Section 6) 第6部分关注细粒度设计带来的优缺点以及可重用的软件组件, 然后得出一个结论它们是如此简单的适合TinyOS这个操作系统(原文用a poor fit, 作者可能想表达这种设计是没办法的办法).&lt;/p&gt;
&lt;p&gt;(Section 7) 第7部分从一个社会学的角度来探讨TinyOS: 这个项目是如何成长为这样一个大的开发社区? 开源项目的生与死是他们的开发者一手造成的. 今天, 由来自世界范围内的开发者和用户组成了TinyOS开发社区. 我们将探讨这样一个社区是如何组织起来以及它是如何演变, 以及这个项目遇到的各种缺陷, 包括: 招聘员工(当然开源社区没有员工这个说法, 这里指寻找有能力的开发者), 管理代码的贡献, 以及学术界和工业界的交互. 这一节还将探讨文档对用户的作用, 以及该项目是如何降低由于日益增加的技术难度给初学者造成的阻碍.&lt;/p&gt;
&lt;p&gt;(Section 8) 第8部分, 退后一步, 探讨如何将从TinyOS项目学来的经验教训应用到更通用的嵌入式软件和硬件开发中. 有一个结论是细粒度的组件对于实验来说很好, 但是对于期望重用的稳定软件来说却增加了不必要和令人苦恼的复杂度(比如说内核).还有一个结论是通过抛弃一些不必要的特性, 让它以一种更自然的方式演化来做到长期满足用户的需求(这句话很实在, 确实软件的设计者更应该考虑的是用户的需求, 而不是画蛇添足), 学术研究更希望的是开拓新的技术, 但是这样做却会疏远广泛的用户, 扼杀了软件项目的长期成功.我们将讨论如何将TinyOS项目带入更广泛的用户的对策以此来避免这些和其他方面的缺陷.&lt;/p&gt;
&lt;h3&gt;2. &lt;span class=&quot;caps&quot;&gt;MINIMIZATION&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;PREVENTION&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;TinyOS的发展有两个主要的目标, 最小化资源的使用和尽量阻止BUG, 两者都是为了迎合传感器网络的需求.&lt;br /&gt;
最小化原则要求TinyOS软件系统应该尽可能少的占用硬件的资源, 这指的是更高效的计算(最小化周期次数和唤醒时间), 更少的声明(最小化RAM), 更紧凑的代码(最小化)&lt;span class=&quot;caps&quot;&gt;ROM&lt;/span&gt;, 传统的计算系统也想变的高效率, 但它们却会让效率和灵活性方面做一点交换, 而效率主要体现在内核模块, 插件和其他一些机制. 相反TinyOS更专注于产生一份可以让设备在无人环境中运行数月甚至数年的极端高效的代码.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tinyos-decade-table.png&quot; style=&quot;width:600px;height:500px;border:solid 3px #e3e3e3;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;表1&lt;/h3&gt;
&lt;p&gt;嵌入式传感器设备的两个特性决定了决定了这样的最小化原则, 其一是能量, 我们知道, 在设备内部, 不管是工作状态还是在休眠状态, 硬件资源的多少和消耗的能量成正比(确实是这样的, 搞上层应用开发的人员可能觉得睡眠了怎么还会消耗能量, 确实是这样的, 因为硬件层面上我们无法真正的休眠, 只是将时钟切换到了低功耗模式, 其实硬件还是在跑), 由于节点大部分时间都在睡眠, 因此即使是很小的睡眠损耗都是很重要的部分. 表1 对TI MSP430和ARM(Cortex-M3)的几种CPU进行了比较, 16位的MSP430微控制器被广泛的使用, 正是由于它极低(1.3-2uA)的睡眠电流, 另外一款32位ARM架构号称&amp;#8217;极低&amp;#8217;功耗的Cortex-M3, 相反,在睡眠模式下却需要950uA的电流.&lt;/p&gt;
&lt;p&gt;因为这些设备已经被设计成极低功耗的操作, 我们不可能在短期内对它们进行大的改进, 并且由于市场以及对待性能方面的考虑和处理器不同, 微控制器的发展并不遵循Moore(摩尔)定律, 因此即使是TinyOS的第一代原型产品:8kB code、512 byte RAM和48kB code、10kB RAM也存在了7年了.&lt;/p&gt;
&lt;p&gt;残酷的电源能量现实(每传输一个比特, 节点离死亡就更进了一步)导致节点几乎所有的时间都在睡觉, 在这样的情况下, 相对的, 实时操作系统例如:FreeRTOS, eCos, uC/OS2将是一个很糟糕的选择, 它们的首要任务就是充分利用有限的资源, 这会让节点早日归天, 但如果资源几乎空闲, 那么调度根本不需要那样麻烦. 而且这些RTOS还需要考虑如何非常精确稳定的控制, 这是和无线传感器网络相违背的, 事实上, 也没有多大的用处.&lt;/p&gt;
&lt;p&gt;第二个需要考虑的是成本, 虽然学术研究为了方便扩展, 原型可能使用顶级的微控制器, 但是对于大量的或者商业的应用, 这些花费都是过分而又没有必要的, 使用16kB的代码和512B的RAM而不是同类MSP430中最好的, 我们就可以将成本削减到6美元, 对于10万个节点, 60万美元这样的价格还是值得让我们的软件工程师优化、榨取节点上的资源的!(虽然这个有点令软件开发人员不太高兴, 但事实就是这样, 不过技术不就是在极限环境中成长起来的吗).&lt;br /&gt;
在TinyOS前四年的发展中, RAM是最紧缺的资源, mica和mica2节点只有128kB的ROM和4kB的RAM, 应用程序会首先遇到RAM的限制, 而不是ROM. 不像PC机我们可以有虚拟内存和交换空间, 即使是稍微有一点大的程序都会使节点运行很缓慢. 而当栈溢出时, 程序要么发生编译错误, 要么发生冲突.&lt;/p&gt;
&lt;p&gt;第二个原则是阻止BUG, 这主要是从软件结构上来治理. 我们知道, 所有的软件都想阻止BUG, 但不同的是TinyOS的运行在极其难以调试的传感器网络环境. 对于这种环境下的调试, 甚至引发了大量的研究. 传感器网络是一个高度分布式的系统, 节点动态地和环境以及其它节点发生交互. 资源和能量的限制阻碍了我们借助当前广泛使用的日志和传统的调试技术.很多传感器网络甚至不支持TCP连接以及单节点访问!那么我们到底用什么办法对节点进行调试呢?&lt;br /&gt;
很多文献给出了传感器网络的应用, 监控对象从火山、鸟巢、中央空调(&lt;span class=&quot;caps&quot;&gt;HVAC&lt;/span&gt;: http://en.wikipedia.org/wiki/&lt;span class=&quot;caps&quot;&gt;HVAC&lt;/span&gt;)、石油开采到工业蒸汽管道. 使用TinyOS的早期版本部署应用程序时, 在系统从实验室迁移到实际环境的过程中几乎都会发生错误.随着TinyOS的发展, 这些来自于实际用户的经历导致TinyOS的开发者更强烈地要遵循阻止BUG的原则. 目前的应用程序的部署都在使用TinyOS 2.x版本, 例如2010年一个和医院合作的还不错的项目SenSys(读者可以参考这里: http://sensys.acm.org/2010/index.html).&lt;/p&gt;
&lt;p&gt;为了达到这样的目的, 演变后的nesC语言原语和TinyOS编程抽象架构将传统的动态运行时操作变为静态编译时操作, 经过这样的设计就允许在极少的RAM(作者说near-optimal &lt;span class=&quot;caps&quot;&gt;RAM&lt;/span&gt;)上同时支持大量的复杂而又可靠的软件系统. 接下来将探讨TinyOS在以下四个方面是如何演变的: ROM和RAM分配、代码隔离、软件组件以及语言特性.图1展示了该项目从1999到2010年的时间轴线, 标出了这其中重大的组织上和技术上的事件.&lt;/p&gt;
&lt;h3&gt;3. &lt;span class=&quot;caps&quot;&gt;RAM&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;ROM&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;ALLOCATION&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;TinyOS通常需要10:1的ROM和RAM的比率, 但也有一些例外, 比如存在大量的包队列和图像感知的时候, 但总的来说, 这个比率和微控制器提供的有限资源刚好很吻合. 举个例子: TinyOS 1.x主要是为mica平台设计的, 这个平台上的Atmega128微控制器有128kB的ROM和4kB的RAM, 应用程序在mica系列上运行会首先遇到RAM的瓶颈. 相反, 使用TI(德州仪器)公司48kB ROM、10kBRAM的MSP430微控制器的Telos系列, 应用程序会首先遇到ROM的瓶颈.&lt;/p&gt;
&lt;p&gt;虽然大多数的努力都集中在ROM和RAM上, 但其实最小化占用CPU的周期也是很有效的策略.nesC文档讨论了减少ROM和RAM消耗的最主要的技术:使用inline和裁剪不被运行的代码, 相反, 大多数时候我们还是从软件的结构考虑优化.(作者意思可能是在语言层面上做的努力能够压榨的空间很有限, 还是需要用户写真正的节约RAM和ROM的程序, 他可能是想说TinyOS架构的设计才是重点).通常, RAM要比ROM更让人关注, 因为mica要比telos更具一般性.(这个观点和之前讨论的工业应用很吻合).&lt;/p&gt;
&lt;p&gt;一些设计上通过增加代码来减小RAM的决定对于Telos平台的应用程序也提出的问题. 举个例子: 当驱动程序需要配置芯片的ADC时, 配置选项包括采集管脚、参考电压、采集持续时间、时钟源, 当驱动程序采集完ADC时, 一般需要重新进行配置参数(比如说中断标志位可能发生改变, 通常我们可能还要再次初始化), 由于这个过程通常是很快速的, 通常就像是拨动一下&amp;quot;寄存器&amp;quot;某一位上的开关, 在每一次ADC采集的时候, 软件会自动的处理这种配置操作. 通常情况下我们设置这些参数的手段是分配一个结构体, 然后传给ADC, 但是即使有时候ADC只需要一个副本, 这种方法却意味着要让每一个驱动代码都要维护这样一个结构体,这就浪费了RAM空间. 实际上TinyOS实现的时候是直接在栈上用一个函数来得到这个结构体. (这里有一个很重要的概念需要说明, CPU有两中体系结构:CISC和RISC, 单片机很多都是RISC, 比如AVR和MSP430, 它们在执行指令时不同的是:CISC将数据和指令集成在一起, 而RISC是指令和数据分开存放的, 因此当我们将程序写完以后是将程序烧到了ROM中, 执行过程中对于只读的部分全部从ROM中取, 也就是不会调入RAM, RAM存放全局变量、临时变量等, 因此当我们看到单片机只有128kB ROM而只有4kB RAM时不要奇怪, 我们写的代码是不会全部调入RAM的.实际上我觉得这里作者就是传达一种理念:少使用全局变量, 使用局部变量!读者查看tos/chips/atm128/adc/Atm128AdcP.nc和HplAtm128AdcP.nc, 结构体都是临时在函数内部赋值的). 我们不是在内存中维护这样一个结构体, 而是在用到的时候重新生成, 对于每一个使用ADC的设备, 我们可以通过这种技术手段将RAM降低4byte但同时提高ROM 50-60byte. 这种方法在mica平台上运行的很好, 但是对于Telos应用来说&amp;quot;ADC膨胀&amp;quot;却成了很普遍的兼容性问题. 倾向与减少RAM和倾向于减少ROM的API函数看起来也相当的不同, 这就要求开发者二选一或者采用其他的一些让代码不兼容的方法.&lt;/p&gt;
&lt;p&gt;通过系统的APIs来最小化RAM有时候是一个极其严峻的挑战. 虽然传统的操作系统希望快速的系统调用, 但TinyOS操作系统却希望它们能够尽可能的减少RAM的使用. 很典型的一个例子就是定时器服务(Timer Service). 系统内的很多组件都需要定时器. 应用程序需要周期性地采集数据、路由协议需要周期性的发送信标、而链路层需要管理避退和重传的间隔.一个完整的应用程序可能需要3-15个定时器, 而每一个32位的定时器都需要10bytes来存储状态(启动之后的间隔、一些控制位, 比如重复定时器), 在最好的情况下, 系统会为每一个定时器分配10bytes的空间, 不会再少了.&lt;/p&gt;
&lt;p&gt;第一个版本的定时器系统(1.0之前的版本, 很可惜, 现在已经找不到了, 如果读者知道在哪里下载, 一定要告诉我.)是直接让每一个客户程序自己分配定时器的状态信息然后将这个指针传递给这个定时器系统. 这一方面意味着客户程序需要分配精确个数的定时器结构体.另一方面在每一个结构体内部还需要一个额外的状态: 一个指针. 这样就可以让定时器系统在实现的时候将他们串成一个链表.一个指针就增加了这个结构体12bytes, 又是20%的冗余.此外由于动态分配导致的内存错误已经变成了一个普遍的源代码运行时错误.由于每一个使用定时器服务的客户程序都分配自己的结构体, 例如内部的一个大小差一(off-by-one)错误将导致指针失效(这里的大小差一应该指的是C语言数组从0开始, 这样很容易导致代码发生越界, 而边界通常保存着一些重要信息比如一些指针地址, 于是系统就崩溃了), 破坏链表结构, 但或许重新调用就没有问题. 于是当你将30多个节点重新烧写完以后却出现了一个简单的内存错误, 你就再也不想这样了!&lt;/p&gt;
&lt;p&gt;为了应对困难的定时器调试, 下一个版本定时器系统(v.10版本)分配了一个固定数组大小的私有定时器数据结构(也就是将链表换成了数组), 为了区分不同的定时器, nesC引入了一个特殊的函数:unique, nesC在编译的时候计算unique, 每一次对一个指定的字符串s调用unique, 都会返回一个[0,N-1]范围内独一无二的整数, N表示调用字符串s的次数, 由于在编译阶段, 我们可以载入所有的源代码, 因此nesC编译器可以解析出每一次对unique的调用, 这样就可以正确的计算出N, unique使用字符s作为管理一组独一无二的集合值的一般方法, 组件需要使用unique为定时器分配一个key, 然后将这个key传入定时器系统, 第二个版本就是用这个key来当作数组的下标来关联上面的定时器结构体数组的.&lt;/p&gt;
&lt;p&gt;第二版的定时器系统更稳定了, 但是却往往浪费更多的RAM, 程序经常会将定时器结构体数组分配的足够大, 这样调用unique时候就不会出现数组越界了. 这个问题并不限定于定时器, 它广泛的存在于ADC采集, 包队列和很多其他的组件中.&lt;/p&gt;
&lt;p&gt;于是第三版的定时器系统出现了!(救世主来了, v1.1版本), 它通过使用一个新的函数uniqueCount达到了最小化RAM的使用!和unique类似, uniqueCount也是接受一个指定的字符串然后返回一个整数, 但它的返回值是调用对应unique函数的总和, 比如对于定时器服务我们可以这样声明:timer_state_t timer[uniqueCount(&amp;#8220;Timer&amp;#8221;)];然后unique那边的key就可以据此安全的访问数组了.如果我们可以假设所有的定时器客户端程序都使用正确的字符串s, 定时器服务甚至可以省略运行时检查, 这样又可以减小代码的大小.最终, 现在的TinyOS可以为定时器服务精确分配最少的RAM, 这在mica平台上只有988byte.&amp;quot;最小&amp;quot;也就是说:如果每一个定时器都需要10bytes的状态信息, 那么n个定时器就应该分配n*10bytes的RAM.&lt;/p&gt;
&lt;h3&gt;4. &lt;acronym title=&quot;隔离&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ISOLATION&lt;/span&gt;&lt;/acronym&gt;&lt;/h3&gt;
&lt;p&gt;一开始的时候, TinyOS并不支持对所有的类型进行动态内存分配. 虽然类似于malloc这样的方法确实很危险, 但确实需要使用内存分配来应对日益增长的需求.TinyOS 1.1版本对于多个组件共享一个内存资源的时候会遇到很多的问题, 例如: 系统内核的调度器提供了一个抽象叫做任务, 这是一种推迟的过程调用机制, 调度器维护了一个固定数组大小的任务数组来运行任务, 如果一个组件提交了一个任务到已满的任务数组中, 那么提交就会失败, 这就提出了一个非常困难的错误情形: 组件如何再次去提交任务呢?由于TinyOS只有一个栈空间, 因此组件是不能够自旋(原地等待再次post)或者等待的, 否则调度器就不会释放一个已经执行完的函数直到当前的函数返回(这句话可能有点绕, 其实就是说这一边一直在等待提交就是不返回, 而那边的任务却等着你返回才可以释放资源, 于是就死锁了), 而且类似于定时器这类组件必须被重新调用, 但是定时器服务也在使用任务机制, 那么就会导致定时器请求被抛弃, 这样就再也不能提交这一类任务了.&lt;/p&gt;
&lt;p&gt;包传输也面临着相同的问题, 在TinyOS 1.x版本中, 如果发送队列满了那么传输请求就会出错, 因为这个队列被很多组件共享, 很有可能一个组件填满了队列就导致其他的发送组件饥饿, 而一些协议是周期性的传输数据的(比如说路由信标), 这就会导致它们被丢失, 因此TinyOS 1.x中这样一个错误的行为就可能导致整个协议栈的崩溃!&lt;/p&gt;
&lt;p&gt;我们得出的结论是即使是那些隐藏起来的极其有限的全局的、共享内存池, 无论是对于要求鲁棒性的软件还是上文提到的阻止BUG这样的原则来说都是极其危险的.一个差的组件将会产生导致整个系统都难以处理的错误.它们将导致很难查到或者很难鉴别的错误, 这将会产生嵌入式平台上很难调试的令人发狂又沮丧的接口.&lt;/p&gt;
&lt;p&gt;随着时间的推迟, 我们渐渐发现了其实阻碍我们在TinyOS 1.x上编写高可靠性的代码最主要的原因是:缺少隔离.通过隔离进程, 传统的操作系统可以很好的简化应用程序的实现, 相反, 任务队列的例子就显示了TinyOS 1.x隔离做的很差.这样的例子数不胜数, 例如链路层的发送队列, 采集部分, 以及每一个操作系统都不例外的定时器.因此, 要想构建非常健壮的TinyOS 1.x程序我们必须尽可能考虑并处理所有的失败和错误情形, 即使这样会增加RAM和ROM的消耗.&lt;/p&gt;
&lt;p&gt;TinyOS 2.x通过组件间隔离降低了这种情况的发生的几率. 它让每一个组件和底层的共享资源的交互完全独立, 对于每一个客户程序, 都有一个完全虚拟的实例, 例如调用send接口的返回值就是完全独立的而不管其它的包是否在传输队列中. 然而对于这种形式的内存分配需要在编译的时候, 否则它将引入运行时错误.(这里应该就是指TinyOS 2.x里面的参数化接口).&lt;/p&gt;
&lt;p&gt;根据(Section 3)第三部分, TinyOS 2.x为了完成这种静态虚拟化行为, 主要是借助通用组件(generic components)以及内存分配技术两者, 通用组件是可以实例化的nesC组件, 它可以接受自定义类型和普通元数据类型(在2.x版本之前, 在全局作用域范围内, 所有的nesC组件都是单一组件), 通用组件提高了代码的重用, 这个和java的generic、C++的模版以及其他语言的相似机制是异曲同工的.&lt;/p&gt;
&lt;p&gt;静态虚拟化背后的基本理念是一组软件可以被声明为逻辑上的(虚拟的)服务实例, 例如发送链路层包的能力, 这类API接口的行为是完全独立于其它用户操作该API表现出行为的(这里也需要解释一下:也就是用户之间没有干扰, 也不知道之间的存在, 这就像多任务一样).调用方知道任何调用的结果, 这是因为对于所有的传输来说所有的有限状态机的接口都来自那个调用者.这个和传统上我们所说的只有一个API接口并且避免共享状态是不同的.(也就是和单任务是不同的).&lt;/p&gt;
&lt;p&gt;TinyOS完成整个静态虚拟话的工作是完全在编译时进行的, 它使用抽象出来的叫做参数化接口的概念来区分多个客户程序.现在我们知道unique和uniqueCount这两个函数是用来确定客户实例号以及它们的总数的, 而通用组件(generic components)是通过对用户屏蔽机器特性来阻止BUG. 在TinyOS 2.x中不管是所有的API还是系统服务都在使用静态虚拟化技术.例如, 为了发送链路层的包, 客户程序实例化了一个AMSenderC组件, AMSenderC组件有一个特性就是拒绝同一个客户程序重复请求.&lt;/p&gt;
&lt;p&gt;在底层, AMSenderC将AMSend接口连接到了一个包队列, 我们可以在图2中看出来.包队列有一个参数化的Send接口, 而每一次实例化一个AMSenderC都会调用unique, 包队列就会调用uniqueCount来分配正确的队列长度, 当组件尝试发送包的时候, 包队列就会检查所相应的条目是否已经在队列中了, 如果不在, 那么这个包就会被传输, 如果已经存在, 它就将通知调用程序重试(我已经贴出了tos/system/AMQueueImplP.nc中Send.send的实现, 使用了参数化接口高效地完成了查找).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tinyos-decade-2.png&quot; style=&quot;width:600px;height:350px;border:solid 3px #e3e3e3;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;图二&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numClients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBUSY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AMQueue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;AMQueue: request to send from %hhu (%p): passed checks&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPayloadLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numClients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// queue empty&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;am_id_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMPacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;am_addr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMPacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      
            &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AMQueue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%s: request to send from %hhu (%p): queue empty&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__FUNCTION__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AMQueue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%s: underlying send failed.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__FUNCTION__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numClients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AMQueue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;AMQueue: request to send from %hhu (%p): queue not empty&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;静态虚拟化是一个来自于合并了无线传感器接口unique需求的TinyOS的新的编程例子(这里就是指能够让多个实例互不干扰的工作), 这代表着我们在高效率高可靠性的嵌入式系统上前进了一大步!通过静态虚拟化, 软件能够使用操作系统提供的服务, 安全的隔离来自其他客户程序的相同服务.由于API的行为完全基于调用的组件, 那我们就可以直接确认这些组件是正确的!(例如接口的契约), 而且底层的实现也可以精确的分配需要的RAM的大小, 以及简单, 简洁的代码.&lt;/p&gt;
&lt;h3&gt;5. &lt;span class=&quot;caps&quot;&gt;LANGUAGE&lt;/span&gt;/OS-&lt;acronym title=&quot;语言和操作系统的设计&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DESIGN&lt;/span&gt;&lt;/acronym&gt;&lt;/h3&gt;
&lt;p&gt;在早期的TinyOS开发中, 我们决定去设计一门语言来更好的支持编程和它的并发模型. nesC语言可以让TinyOS达到资源和效率的最小化(资源/效率应该越小越好, 这是最小化原则), 以及出人意料的低BUG比率(这是阻止原则). 拥有一门新的语言也能够允许我们通过进化和扩展语言特性来解决新的问题(也就是灵活性更高). 比如说静态虚拟化语言特性(参数化接口、unique、uniqueCount、generic components)合并操作4年的周期了.同时控制语言和操作系统两个层面, 给予了这个项目极大的灵活性来完成系统的设计.&lt;/p&gt;
&lt;p&gt;一方面, 静态虚拟化是一个杰出的编程接口, 另一方面, 通过nesC来完成这样一个复杂的软件也证明了这种方式的强大. 达到这样的目的我们走了一条蜿蜒而又曲折的道路:4年主要版本的发布和5年系统之上的开发, 结果像静态虚拟化这样的技术却是像临时想出来的而不是计划之中的, 利用语言机制和少有的编程风格却将陌生的用户挡在了门外.(这个很是戏剧性啊, 哈哈:), 作者好像对静态虚拟化这样的技术很是情有独钟, 但是用户却不买它的账&amp;#8230;)&lt;/p&gt;
&lt;p&gt;语言的演变是一把双刃剑. 随着TinyOS变得更具鲁棒性, 用户开始利用它处理更具挑战性的项目. 操作系统和语言的共同演变满足了这样的需求. 一方面这种演变使得处理更大更困难的问题成为了可能, 另一方面, 每一个阶段的演变都会增加新的特性, 使得TinyOS和nesC与C语言之间离得越来越远, 这就阻碍了进入的壁垒, 而且越是有效的软件模式, 比如说静态虚拟化, 越是使用在复杂而又新的编程方式中, 由于过分专注了专家级的TinyOS用户以及让它更有可能写大型的软件程序, TinyOS 2.x对于新的用户来说可接触性很差, 不幸的是, 让它难以写错误的代码也导致了它很难写代码!(笔者倒是有一种欣慰, 刚开始学习TinyOS 2.x的时候挑灯夜读, 先看完了官方www.tinyos.net上的tutorials, 然后很幸运的搜索到了tinyos的英文完全版, 很艰难的看完了, 然后又很艰难的读了TEPS, 接口也看了八九不离十了, 后来发现还需要java才能和pc机通信, 又去看了java, 最后整天在tinyos底层的源代码里面跳来跳去, 还是不知所云, 写过最大的程序其实还是BlinkToRadio, 后来有到了tos/sensorboards/mts300里面随便找了几个可以读传感器的用了用, 但仅此而已, 一直感觉没有入门, 既不会移植TinyOS, 写不会写新的驱动, 而且对那些高级的特性就是头大, 还被一个学长教导过, 让我们不要学这些没用的.时至今日, 其实我觉得TinyOS给我最大的收获其实不在于系统本身, 而是它涉及到的太多了, 从硬件到软件, 从nesC到C到java, 而我又有一种探究精神, 一直想把一个问题弄明白, 知道它为什么会这样, 于是这些东西都接触到了, 虽然现在仍然停留在初级阶段, 但是对于打开思路确实非常有帮助, 其实有时候我们往往缺少的就是坚持, 总想收获很多, 这个搞一天调不通, 于是不高兴弄了, 那个配起来太烦了, 也不想做, 于是在技术面前遇到了太多选择, 在我看来每一个技术都是相通的, 特别是大师们设计的作品, 更是掺入了很多精华的设计思想, 我们在这样的一种观摩中, 既锻炼了毅力, 又学到了好的设计, 这个和初学绘画又有什么不一样吗?更重要的是TinyOS和nesC之间的有趣联系, 以及TinyOS项目本身的发展给带给我很多的启发, 从技术的权衡, 软件职责不同层面的分工, 设计模式, 甚至到软件之外社会层面上人类层面的合作与交流.做学生阶段能够产生这么大的感触我感觉值了.)&lt;/p&gt;
&lt;p&gt;回顾这段历史, 专注于专家级的用户我们错失了一个很好的机会:特殊爱好者以及DIY制作群体, 通过领先的杂志媒体报道, 在过去的5年中, 我们看到了在简单、DIY电子项目巨大的增长趋势.这样的一个社区都被Arduino平台所吸引了.和TinyOS相比, Arduino相当的简陋: 只是由于简单的采集或冲动下诞生的单线程C语言程序.但是这对于爱好者来说, 它们更渴望能够很容易地看到这种结果.这就像制造一台口香糖售货机, 在你需要的时候只要敲击一下面板上神秘的按钮就可以了.(来自于&amp;lt;&amp;lt;制作&amp;gt;&amp;gt;杂志上一篇制作机器的文章), 根本不需要什么静态虚拟化, 网络数据类型以及编译时的数据竞争检测.(看的出来作者很失落, 这样一个经过优秀设计的系统却不能够为广泛的用户所知, 不能够被爱好者群体所接受, 实在是令人可惜)&lt;/p&gt;
&lt;p&gt;学习nesC新的语言特性和它日益增长的API以及软件实现已经越来越困难了.事实上, 不管是演变出大量的API还是添加新的语言特性都不应该增加编程的困难度. 其实语言不需要很复杂, 最好能够让初学者很快写出简单的程序, 但程序能够解决多么复杂的问题就要看用户的认知水平了.能够举出的不仅仅是操作系统这个例子, 语言社区也有这样的问题, 比如说Perl5和Perl6, Perl5的正则表达式很像是很多UNIX里的其它小工具(sed、shells等), 因此对于一个经验丰富的UNIX用户来说学习曲线将会很平缓, 自然而然的.相反, Perl6的正则表达式引入了通过语法和规则构造的编程语言, 这就需要用户从头学起. 早期的TinyOS程序大多数是由C语言和少量的nesC组件构成的(就是说对用户还相对友好, 很好学习), 但是当前版本的代码, 几乎充噬着很多的nesC特性, 这就让学习的曲线相当的陡峭.&lt;br /&gt;
这种陡峭的学习曲线影响着人员的配备. 学术性的项目趋向于让研究生成为它的首要开发者, 这种在研究和工程之间的矛盾有时候我们可以通过雇佣软件工程师来解决.但是对于TinyOS来说, 随着语言的演变将这个过程变得越来越复杂.不同的组织机构也尝试了好几次去雇佣TinyOS编程人员, 但是结果就很混乱了. 第一个被雇佣的人是早在TinyOS 1.0版本的时候, 而且他做了很大的贡献, 但是2005年无线传感器网络刚刚兴起的时候却离职了. 第二个被雇佣的人是在2004年TinyOS2.x刚刚开始发展的时候, Intel研究机构希望雇佣一个人做TinyOS1.x, 但是一年之后仅仅写了一个简单的组件, 于是不得不将他撤职了. 第三个被雇佣的人主要原因是做事件驱动系统, 但是那会以太网和TinyOS之间巨大的分歧, 他也做不了什么事情.现在回想一下历史, 早期雇佣的人员可以很好的学习这个系统并且和它一起演化, 这就会比后来当它具有重大改变和新的复杂度以后再去学习研究来的成功.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tinyos-decade-3.png&quot; style=&quot;width:600px;height:600px;border:solid 3px #e3e3e3;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;图3&lt;/h3&gt;
&lt;p&gt;但是有一个后来雇佣的成员对这个项目所做的贡献非常成功, 他是一个特殊而又独一无二的例子.在成为软件工程师之前, 他已经是TinyOS 2.x最大的贡献者了, 已经在研究无限传感器网络方面达到了一定的造诣, 事实上只有某一些人在为着这个社区做贡献也显示了这样一个障碍:进入操作系统/语言层面进行合作设计非常困难.&lt;br /&gt;
其它的一些传感器网络操作系统也在慢慢填补TinyOS留下的空白. Contiki就是一个例子, 它是一个不用重新编译, 完全用C语言编写, 提供了传统的基于内核和用户程序的模型.(这里的不用重新编译应该指的是内核).虽然TinyOS比它更有效而又简洁, 但是从Contiki起步学习却更容易.今天, 一些重要的传感器研究都放到了Contiki上面而不是TinyOS.&lt;/p&gt;
&lt;h3&gt;&lt;acronym title=&quot;组件&quot;&gt;&lt;span class=&quot;caps&quot;&gt;COMPONENTS&lt;/span&gt;&lt;/acronym&gt;&lt;/h3&gt;
&lt;p&gt;组件的概念是TinyOS编程模型的关键, 组件将接口和实现进行了分离, 提供了数据的私有性、允许代码的重用, 而且也方便了nesC语言在结构上进行很多有效的优化.综合这些因素, 在嵌入式软件中使用组件化编程相对于用C语言是一个巨大的提高.&lt;/p&gt;
&lt;p&gt;虽然组件通常都很有益, 但是它们却被很差的使用. 在早期, TinyOS是被视为一个研究工具, 我们尝试通过结构化的软件来让一些小的扩展和修改来的更容易. 我们也是基于反馈(特别是早先MAC层的研究, 例如S-&lt;span class=&quot;caps&quot;&gt;MAC&lt;/span&gt;), 发现很多(指研究过程中遇到的问题)其实都是由很多小的, 轻量级的组件构成的层次结构.例如, 如果有人想要修改mica平台上MAC定时器的功能(载波侦听, 避退), 这个其实就是修改一个组件, 而要是想修改数据编码/解码就改变另一个不同的组件.&lt;/p&gt;
&lt;p&gt;这个想法的主要目的是方便我们进行实验.但是细粒度的组件有一个严重的缺陷我们并没有预见.今天使用最多的无线驱动(Chipon公司的CC2420)大约有2400行代码、41个不同的组件.2400行代码竟然有40多个文件!一个稍微有点小的例子是时间服务, 我们可以在图3中看出来, 包含8个组件通过利用32KHZ的比较计数器和溢出中断使之转化为毫秒粒度的定时器组件, 然后又通过3个变成了静态虚拟定时器, 最终小于1k字节的代码居然分散在11个不同的文件中.对于阻止原则和最小化原则,这的确很好.每一个这样的小组件都很容易确认和消除BUG, 而且组件间的接口也很好的保证了很好的避免了由于相同代码的不同副本出现的浪费.&lt;/p&gt;
&lt;p&gt;但是从图三中我们也看出, 缺陷是细粒度组件的组合让我们在第一次接触时很难理解这个系统.大量的很小的函数片段出现在很多的文件中, 无穷无尽的间接层, 让我们追踪它的时候非常头疼.这种结构的复杂度破坏了我们的初衷, 在刚才举的CC2420例子中, 其实我们仅仅希望在41个文件中找到我们需要的那个重要的文件.当你实现了这个系统的时候, 你可能觉得这些都是有意义的, 但是对于新的用户来说, 既复杂又绕人.一个研究用户接口的人会说这个根本就不是什么问题, 只要用一个好的开发工具就可以让这些代码变的简单而又直观.然而这样的人既没有既没有找到这样的工具也没有花时间做一个出来.或许这不是什么基本问题, 而是真实而又实际的问题.&lt;/p&gt;
&lt;p&gt;对于应用层的系统, 比如GUI工具包或者用鼠标单击单击的路由器, 细粒度的组件能够变得有意义, 因为每一个应用程序都是不一样的, 使用一个灵活的工具包能够很快速的提高开发的进度, 但是对于操作系统来说, 就完全不是这个样子了.到了底层对于TinyOS定时器服务来说,其实一共就只有一个利用少数几个可以列出来的微控制器构建出来的定时器系统, 并没有多少无线芯片长的和CC2420一个样子, 这里面根本就没有多少变种芯片.于是这些库将变成操作系统的基本APIs, 最终应用程序的开发者也希望稳定, 因此在这个方面的创新其实是不多的(读者也这么认为, 即使学习硬件, 其实也应该选择一款固定的平台, 并使用它来构建自己的应用, 与其说这是创新, 不如说改变, 我们其实最主要关注的不应该是搭建环境, 一旦核心的技术问题解决了, 系统自然而然就成功做出来了, 剩下的就是时间和人手了, 这就是合作的道理).&lt;/p&gt;
&lt;p&gt;如果你需要适应多个独立的变化, 设计这样一种细粒度抽象是很有必要的.例如如果想要引入一个可以替换的MAC层协议(类似于那种漏斗状的MAC协议层)然后能够替换包的重传机制(比如部分数据包恢复机制, 这个机制叫做PPR, 读者可以去搜索一下, 好像还真是有模有样的.老外写了一篇论文:http://nms.csail.mit.edu/papers/fp315-jamieson.pdf), 但实际上, 操作系统的改变很少是简单修改局部或者替换一个组件这样子的. 它们不是实现很多小的组件, 而是让代码变得简单, 最终这些东西都是紧耦合在一起的.&lt;/p&gt;
&lt;p&gt;我们的结论就是经过仔细设计和小心实现的操作系统要比那些使用类似于开发操作系统工具包或者设计可重用操作系统思想来的有效的多.开发更传统的操作系统的经验很好的支持了这个结论.拿到并修改linux的启动代码要比面对那些为了支持通用启动模块的组件框架来的容易的多, 我们没有看清楚的是代码重用并不是说要让整个系统能够达到这样的要求.不管是对于研究者还是工程师, 我们都希望能够设计处这样一个通用的抽象, 但是一边是完美的工艺品, 一边却仅仅是一个通用的架构你觉得哪个好?&lt;/p&gt;
&lt;h3&gt;7. &lt;span class=&quot;caps&quot;&gt;COMMUNITY&lt;/span&gt; &lt;acronym title=&quot;社区结构&quot;&gt;&lt;span class=&quot;caps&quot;&gt;STRUCTURE&lt;/span&gt;&lt;/acronym&gt;&lt;/h3&gt;
&lt;p&gt;TinyOS一开始是UC Berkeley中一个很小的研究项目, 然而今天, 它变成了一个超大的, 全球开发者社区. 20世纪90年代早期，Linux系统在与 HURD系统的较量中取得了成功，从而证明，我们可以靠开放源码项目来建立并维持这种发挥积极作用的发展型社会，这很大程度上既是社会交流与社会结构的作用 也是社会对我们技术持续关注的结果.(关于这个项目读者不妨了解一下, 很尴尬的GNU和linux, HURD看来就是一个神话了, 不过经过minix, &lt;span class=&quot;caps&quot;&gt;HURD&lt;/span&gt;, Linux我们似乎也能发现一些端倪: 是否巨内核是否全面战胜了微内核呢?这里有当年TanenBaum和Torvald之间的大辩论:英文版http://oreilly.com/catalog/opensources/book/appa.html, 翻译版:http://www.simplemind.info/technolife/projects/linus-tanenbaum.html, 一段精彩的历史!)&lt;/p&gt;
&lt;p&gt;这一节主要描述的是TinyOS社区是如何进行社会性的演化的, 主要关注并考虑以下三个方面:社区的结构, 学术研究者和工业产品开发人员以及需要努力管理和支持用户.前一节我们主要TinyOS技术的演化是如何造成进入的壁垒的, 这一节主要探索后来才采用的社会化开发模式(2007年)是如何在某一些方面中和的之前所说的哪些影响的.&lt;/p&gt;
&lt;h4&gt;7.1 Historial Progress(历史的进程)&lt;/h4&gt;
&lt;p&gt;TinyOS社区经历了两次主要的结构上的改变, 这也可以从它的版本演变中反映出来:1999-2002的pre1.0版本, 2002-2005年的1.x版本, 2005至今的2.x版本. 接下来我们通过一个简要的回顾来对这些改变背后进行一个观察并且顺便了解一下这些主要的贡献者.&lt;/p&gt;
&lt;h5&gt;7.1.1 Pre-1.0版本&lt;/h5&gt;
&lt;p&gt;在1.0版本推出之前, TinyOS只是UC Berkeley大学一个很小的研究项目. 主要的作者都是一些Berkeley的学生加上一些来自UCLA和USC学校的访问学生, 后者主要贡献一些组件比如说泛洪实验.那个时候, TinyOS开发和无线传感器网络研究还没有区分开来, 研究者主要还是在UC Berkeley会见并且讨论一些主要的设计上的决定, 这种近距离的合作写出来的代码很像是大多数研究机构的代码库中的代码.&lt;/p&gt;
&lt;h5&gt;7.1.2 Building a community: v1.x(构建社区)&lt;/h5&gt;
&lt;p&gt;当1.0版本发布的时候, 已经通过DARPA NEST项目使得TinyOS变成了一个小型的研究型用户社区.这些用户开始贡献代码, 除了UC Berkeley的学生, TinyOS的核心开发人员开始包括一些研究者以及Intel Berkeley实验室的编程人员.Berkeley NEST项目雇佣了员工去组织展示, 他也开始贡献代码.&lt;/p&gt;
&lt;p&gt;TinyOS1.x系统核心一共有37名开发者向开发树中贡献代码, 23人来自Berkeley: 16个研究生, 5个本科生, 以及两名工作人员. 还有6个来自Intel Research Berkeley研究机构, 3个来自柏林理工大学, 2个来自Crossbow公司: 一个生产Berkeley硬件设计的公司, 最后三个研究生分别来自Vanderbilt,&lt;span class=&quot;caps&quot;&gt;UCLA&lt;/span&gt;,and Harvard大学.&lt;/p&gt;
&lt;p&gt;尽管TinyOS1.x有很多的用户来构建这样的系统来让社区使用, 但大多数的核心TinyOS的开发还是发生在Berkeley大学, 对于主分支上的每一个TinyOS版本代码也都经过了回归测试(http://en.wikipedia.org/wiki/Regression_testing, 保证软件完整性的一种测试). 我们知道, 对于大多数的研究项目来说, 通过一个人来负责管理正式的发布版并且进行正常的回归测试, 是很有效果的.但当时并不是这样的, 研究社区只是将代码放在了不同的&amp;quot;贡献者&amp;quot;目录中, 于是37个TinyOS贡献者在源代码树中建立了110个目录, 遍布在超过80个项目子目录中, 从Funnelling MAC协议到压缩的闪储系统!&lt;/p&gt;
&lt;h5&gt;7.1.3 Expanding globaly: v2.x(全球扩张)&lt;/h5&gt;
&lt;p&gt;Berkeley和TU Berlin大学之间的紧密合作主要是寻求一个核心的TinyOS开发社区让这个项目扩张到UC Berkeley之外, 这一步转变是一个好的预兆:因为此时三个TinyOS项目最大的贡献者已经在2005年的春天离开了Berkeley, 两个已经开始在第一家公司开始了在Moteiv公司的全职工作, 当一个人拥有了展现才能的职位, 动机就来了, 拥有一个更正式的工作就会使得他们继续的为项目做贡献.&lt;/p&gt;
&lt;p&gt;对于TinyOS1.x中出现的若干没有解决的结构上的缺陷, 一组TinyOS核心开发人员达成了共识, 大多数是关于稳定性的.(例如第四节描述的包传输队列), 他们在2004年10月成立了TinyOS2.x工作小组. 工作小组意识到当前最主要的挑战是TinyOS对于新的用户来说还没有一份正式的文档, 由于每一个TinyOS的抽象概念都是在回顾与重新设计中诞生的, 一些小的子项目组成立并且开始着手去定义新的接口, 并将他们整理成TinyOS增强型的提议(&lt;span class=&quot;caps&quot;&gt;TEPS&lt;/span&gt;, 就是官方公布出来的那个), 一份跨Python的增强型提议(&lt;span class=&quot;caps&quot;&gt;PEP&lt;/span&gt;), 还有RFC.&lt;/p&gt;
&lt;p&gt;第一个完整的TinyOS2.0版本花费了两年的时间, 当开始去完成这项工作的时候, 有三家公司(Moteiv, Arch Rock以及CrossBOW)起到了很重要的作用.然而当2.0发布的时候, CrossBOW和Moteiv公司都放弃了参与, Arch Rock后来继续坚持到2007年.&lt;/p&gt;
&lt;p&gt;一些小的学术机构发挥这贡献, 在Berkeley的那些开发者迁移到Arch Rock, Stanford以及Moteiv时, Berkeley的开发者一度降低到0个人, 直到后来2008-2009年初才好一点.随着时间的推移, 坚持最久最重要的学术上的贡献者是TU Berlin大学.他们不仅仅在2005-6年的时候写了很多核心的操作系统代码, 而且还继续发展它的扩展.(比如在2008-10年开发的802.15.4 MAC层协议).在2008年的时候, John Hopkins贡献了一个重编程的网络协议以及CC2420的安全的扩展.&lt;/p&gt;
&lt;p&gt;在提交记录中有一个值得注意的细节, 就是都非常突然.提交往往都是都直接是一个库或者贡献, 都是很少的提交记录(比如说很少修复BUG), 很少的BUG说明了TinyOS2.x成功的遵循了那条阻止原则, 从2010年7月将代码迁移到google code上直到2011年5月, 80000行核心代码一共就只有16处BUG的记录.&lt;/p&gt;
&lt;h4&gt;7.2 Industry vs. Academia(工业和学术)&lt;/h4&gt;
&lt;p&gt;在开源项目的设计中, TinyOS展现了独一无二的一点, 因为我们可以看到它是研究社区大量使用的嵌入式系统. 一方面, 用户这边由于调试嵌入式代码是很困难的, 一般情况下只是使用现成的代码而不是自己重新写代码: 编写一个新的设备驱动要比写一个新的协议更令人畏惧.而另一方面研究社区也在想办法通过修改代码来提升系统的重要程度.这就存在一个冲突, 一边是让既有代码更有效率, 一边却是扩展代码来的组织研究, 这已经变成了一个让TinyOS开发社区很矛盾的地方.&lt;/p&gt;
&lt;p&gt;TinyOS源代码的开发一开始是由学术推动的. 然而, 工业上的贡献的组件却一直存在着很大的争议, 例如Chipcon公司CC2420芯片链路层的协议栈, 今天使用的最主要的无线芯片, 发生了三次版本的交替, 第一次是由学术机构为TinyOS1.x而重写的协议栈, 第二次由Arch Rock公司完全重写了.第三次是由Rincon研究机构扩展了低功耗模块.虽然CC2420芯片驱动代码只有2400多行(大约占据源代码的%3), 却是使用的最为频繁, 遇到最多的, 也是最重要的部分.&lt;/p&gt;
&lt;p&gt;一开始离开Berkeley而去Moteiv和Arch Rock公司的开发者继续为TinyOS2.x贡献着代码, 因为他们的公司也在支持这样一个开源的平台. 然而由于学术研究和工业上的使用两条完全不同的时间轴线, 矛盾变得越来越难以调和. Moteiv和Arch Rock公司都想尽快打造这样一个足够好的平台, 这样他们就有时间关注更高层的服务, 就可以卖钱了!学术研究却刚好相反, 正如我们在TinyOS2.x版本中看到的, 他们认为设计一个未来会很少维护的系统才是最重要的.于是底层版本在设计中出现了无数次的迭代, 比如说电源管理部分、锁部分.这就导致Moteiv和Arch Rock公司将TinyOS复制出了真正的代码库, 然后使用他们自己私有的代码库.&lt;/p&gt;
&lt;p&gt;这种复制引入了很严重的冲突, 例如Moteiv公司自己发布了一个Boomerang版本, 这是一个介于TinyOS1.x到TinyOS2.x之间的支持Moteiv硬件平台的混杂版本, 同时Moteiv公司仍然参与到TinyOS2.x设计的讨论中. 一方面他们反对将TinyOS2.x引入一个离客户需求越来越远的方向, 另一方面, Moteiv公司已经开始停止贡献代码了,这使得很多人听从了这些建议开始使用Boomerang, 这让TinyOS2.x的开发进度慢了很多.&lt;/p&gt;
&lt;h4&gt;7.3 Managing and Supporting Users&lt;/h4&gt;
&lt;p&gt;现在, TinyOS平均每天大约有50-100或者说平均每年18000-36000的下载量, 这个数字还不包括一些开发者通过CVS, &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt;, Git漏掉的, 完全是RPMs, Debian包, 以及VMWare镜像方面的数据, 我们也想观察来自于TinyOS发布服务器上下载日志的三种数据, 删除那些来自于机器的搜索记录, 过滤掉重复的IP(估计这里指的是CVS, &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt;, Git), 遗憾的是由于服务器日至每两个月的轮转(应该指的是日至两个月就销毁了), 以及2010年服务器发生的更替, 都没能够让我们来统计这些数据.&lt;/p&gt;
&lt;p&gt;管理这样一个如此巨大的用户是很困难的, 特别是在每一名开发者也是志愿者的时候, 学计算机出生的那些研究生很难有足够的动机而成为活跃的用户, 即使这样子也很难办的, 因为事实上TinyOS用在了很多大学的课堂上, 这些学生代表的是拥有很丰富的技术经验和能力的群体, 这些开发者根本就对那些普通人很感兴趣的问题或BUG不感冒, 但是有些问题就是很基础很基础的, 比如Java的CLASSPATH问题, 一般的C语言编程问题:&amp;#8220;TinyOS里面有数组吗&amp;#8221;, 或者&amp;quot;从哪里下载TinyOS&amp;quot;, 但这些问题一丢就是10年, 很少有人问津.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tinyos-decade-4.png&quot; style=&quot;width:600px;height:260px;border:solid 3px #e3e3e3;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;图4&lt;/h3&gt;
&lt;p&gt;TinyOS-help是主要的TinyOS帮助邮件列表, 开始于2002年5月, 我们可以从图4看出从那时起到现在发出的邮件数量. 从图中我们能看到有两个有趣的趋势: 第一个是每年刚开始的时候都会有一个下降, 因为是在冬天!第二个是邮件列表中邮件的高峰出现在2007年7月, 一共有947封邮件每个月, 从那时起, 就开始表现出稳定下降的趋势, 然而这个趋势却和下载量不匹配!&lt;/p&gt;
&lt;p&gt;难道2007年出现了比邮件列表更方便的工具吗?原来, 在2007年7月份, 文档工作组开始将TinyOS迁移到一组静态的wiki页面上, 可以方便每个人对它进行修改和创建.从那时起, 随着时间的推移, TinyOS的文档数量开始得到稳定的提升, 有趣的是TinyOS-help邮件数量开始下降, 再也没有那些清一色的问题出现了.以前提出一些基础性问题的人不想再通过邮件POST那样烦了, 于是就去搜索文档或者web, 因此在邮件列表中出现了更多的技术性问题.于是开发者们也开始忽略前者, 转而开始回复那些邮件了.重复性的问题就可以直接通过Google站点搜索功能找到了.&lt;br /&gt;
然而写教程, API文档, 以及编程手册这些事情其实是很枯燥的, 但是这些资料却需要有一个大量用户的社区去长期支持.&lt;/p&gt;
&lt;h3&gt;8. &lt;span class=&quot;caps&quot;&gt;LESSONS&lt;/span&gt; &lt;acronym title=&quot;我们学到了什么&quot;&gt;&lt;span class=&quot;caps&quot;&gt;LEARNED&lt;/span&gt;&lt;/acronym&gt;&lt;/h3&gt;
&lt;p&gt;在过去10年间, TinyOS已经由早期Berkeley的研究生通过C语言预处理宏去维护发展到了今天80000多行代码, 由世界范围内的学术和工业开发者组成的社区使用C语言的一门方言nesC写成!在这个过程中我们既走了几步好棋也犯了一些错误.这一节我们来回答一个问题: 要是我们有后见之明, 我们还会做哪些相似的事情, 我们还去做哪些不一样的事情呢?更通俗一点, 我们怎样让一个学术性的项目更好地发展并走出学术之外呢?我们主要从TinyOS作出的5个具体的决定出发: 采用nesC语言、专注于软件组件化、依赖学术社区作为它的主要用户、和工业进行合作以及它如何去开发文档.如果有可能的话, 我们还会介绍一些其它的学术软件项目.&lt;/p&gt;
&lt;h4&gt;8.1 Good: Language Extensions(好的一面, 使用了扩展的语言)&lt;/h4&gt;
&lt;p&gt;不管怎么说, 采用nesC来进行开发都是正确的选择: nesC语言的特性可以让开发者使用很少的硬件资源编写更健壮的代码.如果我们停留在C语言层面, 根本就不可能出现基于TinyOS的传感器网络的今天的成就, 这个机会就可能丢给其他的那些意识到C的局限性并且采用其它替代语言开发的项目, 而且正是nesC赋予了我们灵活性, 让我们发现了使用C语言根本就不可能发现的提高系统开发能力的新的编程抽象. 比如说静态虚拟化技术.&lt;/p&gt;
&lt;h4&gt;8.2 Bad: How Language Extensions Envolved(坏的一面, 扩展语言的演变)&lt;/h4&gt;
&lt;p&gt;虽然采用nesC语言这个决定很好, 但是TinyOS最终如何使用它就不好说了, 一方面我们知道, &amp;#8217;吃自己的狗粮&amp;#8217;是很重要的法则: (这句话的言外之意就是从平台开始，然后用平台干所有事, 话说这也让我在思考JavaScript, 这也是为什么在软件行业我们不喜欢换平台, 我们情愿用自己不怎么称心的工具, 但就是不用别人那里的陌生的工具, 但其实是教我们不要不切实际, 先去做, 这个很重要, 而不是整天想什么框架, 到头来什么也没有拿出来, 换个思路想, 其实很多时候, 是一通百通的, 但前提是你得不断的去熟悉, 去钻研, 一旦达到了一定的高度, 会悟出许多看似简单, 却受用终身的真谛!这个时候不管怎么平台, 工具, 其实都是解决问题的手段, 甚至人的肉体其实只是精神和物质交流的一个媒介.再也没有对自身的关注, 没有仇恨, 只有爱&amp;#8230;&amp;#8230;)这也是为什么TinyOS的开发者构建了系统和之上的应用, 但是也赋予了系统优势和弱点(吃太多自己的狗粮了). 另一方面, 这也让我们混淆了到底什么叫做困难, 什么又叫做重要.站在学术研究的立场上, 追逐困难的, 未解决的问题或许是有意义的, 但是实际上采用技术手段让有些困难的问题更容易地去解决的同时, 也让简单的问题变得难以解决了, 而这确实在TinyOS中发生了.&lt;/p&gt;
&lt;p&gt;回顾历史, 其实我们更好的做法是让系统的设计和演变分成两半, 前者用来更容易的去构建更大更复杂的系统, 后者用来构建一个更容易进行实验的系统, 但或许激发那些研究系统和网络的研究生采用第二套方案更容易失败,但是, 我们可以想想TinyOS的开发如果让Stanford和Carnegie Mellon大学也参与而飞速地开发传感器设备的原型, 可能就会出现使用低功耗无线传感器设备开发全新的应用的例子. Arduinos, 虽然也部分填补了这一方面, 但是在网络方面却有着有限的能力.谁知道要是这些由TinyOS替代的话, 那么新的科学实验、艺术作品、或者玩具会是什么一个样子??&lt;/p&gt;
&lt;p&gt;另一方面, nesC的演变也让我们发现了一种新的、更好的方式去编写有效的, 无错的嵌入式代码. 要是时光可以倒流, 我们首先要做的事情就是完完全全重新设计这们语言, 或者设计一个新的来更好的支持这样一种结构的编程理念, 而不是使用那些具有通用特性的语言.比如, 我们可以采用一种方式来定义可以自动完成参数设置, unique以及状态管理所有这些事情的静态虚拟化方法, 一个文件就可以定义这个服务, 而不是像现在这样, 需要至少4个文件.&lt;/p&gt;
&lt;h4&gt;8.3 Software Components(软件组件)&lt;/h4&gt;
&lt;p&gt;组件和基本的C代码比起来确实是一个很重要的提高, 他们提供了这样一种即干净的、可重用的、数据私有化又可以让一些工具可以检查确认TinyOS代码的方法(作者这里说的是编译器可以根据这样一个特性做很多的优化), 组件鼓励我们通过将一个复杂的问题、复杂的系统分解为一组小的问题, 来构成简洁的系统.小到射击定位类应用程序大到Tenet这样一个编程系统.(Tenet这个貌似很强大的样子, 有空可以看看, 一个无线传感器网络方面的论文:http://enl.usc.edu/papers/cache/Gnawali06.pdf)&lt;/p&gt;
&lt;h4&gt;8.4 Software Components Architectures(软件组件架构)&lt;/h4&gt;
&lt;p&gt;面对这些应用, 不可避免的, 学术研究更倾向于通过给系统核心定义一个架构来使得它通用化.比如说TinyOS网络层的架构, 但实际上, 后来证明这些为了这些通用性而做的努力并不比它的价值来的大, 如果针对任意给定的抽象都用很多较小的实现来做(转发规则、链路评估), 那么通用性带来的结构上的复杂度将增加它的有害性.&amp;#8220;不要通用, 通用通常都是错的&amp;#8221;, 实际上, 容易移植和修改的往往是那些简单、易于理解, 没有太多乱七八糟复杂结构的代码.其实我们一开始应该使用细粒度的组件, 然后随着时间的推移以及它的稳定, 将这些组件进行整合成一个组件.&lt;/p&gt;
&lt;h4&gt;8.5 Good: Initial Users&lt;/h4&gt;
&lt;p&gt;没有Nest项目, TinyOS项目就可能不会这么快离开Berkeley和其它一些学校去更大的世界发展.NEST带动了Berkeley的开发者将一个普通的项目变成一个真正的软件工程项目:一旦有人开始使用这些代码, 于是也就产生了影响.这也让软件能够走出Berkeley之外, 让大家可以使用、扩展以及比较它. 最终, 就创造出了一种能够让大家将社会知识和积累应用在这个项目上的契机.当一个研究者考虑使用TinyOS的时候, 就有机会知道其他人和组织已经做过了什么, 也就能从这里学到东西.&lt;/p&gt;
&lt;p&gt;很显然, 创建这样一个初始的用户群体(应该类似于TinyOS初期伯克利里面的学生用户群体)很困难的, 里面的每个人该怎么做呢?有两种方案:一种是尽力让内部的用户使用起来, 也许其他的组织和研究者就会发现居然有这样一个很好用的系统.一个显著成功的例子是Click modular router(参考http://read.cs.ucla.edu/click/, 可以自由定制路由器), Click, 起源于MIT, 现在已经被很多的也是MIT的研究项目所使用, 比如Roofnet以及无线网络编码等项目.Click的成功显示了这不仅是一个研究性项目, 而且还是一个被许多研究者和公司使用的工具.&lt;/p&gt;
&lt;p&gt;通常, 第二个方案更容易成功, 那就是去找一个项目, 寄生在上面, 对于TinyOS来说, 对于NEST项目, 确实需要使用TinyOS, 当然这也存在缺点.一些NEST项目的参与者仍然极力反对项目使用TinyOS. 其它成功的例子就没有那么极端了, 比如说DHash++, 它既是IRIS项目的一部分, 也是PlanetLab和Intel项目的一部分.&lt;/p&gt;
&lt;h4&gt;8.6 Bad: Focusing on Experts(坏的一面, 定位在专业用户)&lt;/h4&gt;
&lt;p&gt;回顾过去, 过多的关注技术社区的成长使得TinyOS更专注了技术的复杂度. 即使大方向是技术, 我们也应该拓宽参与度. 但是过分的追求技术的影响, 导致了研究者成了项目的主导.&lt;/p&gt;
&lt;p&gt;虽然我们其实也可以对技术社区之外的用户产生影响(比如说MIT的X, Berkeley的BSD, CMU的Mach, 剑桥的Xen, 以及最近出现的Stanford的OpenFlow都是很显著的例子), 但是这对于嵌入式软件来说确实极其困难的. 由于嵌入式系统往往是封闭的、单一的供应商, 当供应商较少的透露底层细节时, 系统就变得垂直整合.同样有趣的是, 虽然我们知道有很多的公司在使用TinyOS开发产品, 但是能说出来的也就那么几个.&lt;/p&gt;
&lt;h4&gt;8.7 Bad: Early Industrial Involvement(工业参与过早)&lt;/h4&gt;
&lt;p&gt;TinyOS2.x刚开始的时候, 就已经有好几个公司参与了它的设计进程, 但是由于它们开发时间非常紧张, 远远超过了学术研究, 导致最终都在9个月之内放弃了参与. 长时间的讨论、无数次的设计上的迭代确实很令人沮丧, 于是Moteiv和Arch Rock公司事实上都是将源代码主分支复制到他们自己的开发分支中独立进行了.同样令人沮丧的也是目的不一样:Arch Rock和Moteiv公司都希望更关注于他们自己使用的硬件平台, 但是学术研究更希望的是能够支持多种硬件设备, 更通用.&lt;/p&gt;
&lt;p&gt;特别的, 很多早期的来自Crossbow和Moteiv关于TinyOS2.x可编程性方面的批评, 回顾历史, 都是完全错误的.然而当时我们却错误的相信应该让工业尽早的参与进来.TinyOS其实本可以仔细的聆听来自工业合作者的表现出来的需求, 并从中受益.但是当年的这些伙伴后来却都离开了.&lt;/p&gt;
&lt;h4&gt;8.8 Good: Late Industrial Involvement(后期工业的参与)&lt;/h4&gt;
&lt;p&gt;然而06年早期的时候, TinyOS2.x核心部分一设计完成, 一些公司例如Rincon Research, handhelds.org, Zolerta以及Shockfish开始参与进来, 并且对项目产生了重大的贡献. 这些贡献的代码主要是为了驱动他们自己的硬件平台, 尽管也包含较少的一些工具库. 往往商业上的工程师更愿意为设计了很好的结构、精确稳定的接口的系统编写代码, 而不是去包容那些有时看上去像充噬着关于宇宙哲学辩论的系统.斯坦福大学的OpenFlow项目就是一个后期才开始商业合作的项目, 而不是早期.这就比TinyOS采用的方法要好.关于OpenFlow以及Xen的原始设计起源于斯坦福和剑桥.但随着时间的推移, 工业的参与着也愿意实现、扩展并且使用这个系统.&lt;/p&gt;
&lt;h5&gt;8.9 Good: Diverse Documentation&lt;/h5&gt;
&lt;p&gt;随着用户社区的成长, 文档成了一个严重的问题, 以至于有点拖后腿.虽然编写文档很消耗时间, 但是它对于长期保存问题的答案很有价值. 最终TinyOS社区决定要编写三种形式的文档: 1. 教程, 只要是用来起步的2. &lt;span class=&quot;caps&quot;&gt;TEPS&lt;/span&gt;, 这是API和实现的一个参考. 3. 以及一份TinyOS编程手册(超过200页), 主要是深入进去, 介绍一些高级编程的细节以及软件工程的技术.教程, 关注的是如何让新的用户编写程序以及使用一些简单的函数. TEPs解释系统绝大多数的功能, 这是为了让用户去实现一些新的东西.而编程手册主要是帮助用户编写大型、复杂的软件代码.&lt;/p&gt;
&lt;p&gt;编写好的文档有一点令人沮丧的是我们从用户那里听到的声音少了: 没有什么新的消息.于是当TinyOS wiki站点建立以后, 一些开发者开始怀疑问题越来越少是不是因为大家都离开TinyOS社区啦?!但是下载量又说明了:使用TinyOS的人越来越多了, 但是问问题的少了.&lt;/p&gt;
&lt;h5&gt;8.10 Bad: Only Developer Documentation&lt;/h5&gt;
&lt;p&gt;事实上, 为各种不同技术背景的用户编写文档是一件很有挑战性的工作.当TinyOS在早期的演变过程中, 还不是很复杂的时候, 由开发者编写的文档自然能够被其他的C程序员看懂, 但是随着系统变得越来越复杂, 专家级的开发者增多, 教程也变得既冗长又难以理解.&lt;/p&gt;
&lt;p&gt;回顾历史, TinyOS将文档整理到wiki上也太迟了! 这主要是我们有一点担心: 一旦我们将文档开放给用户, 那么他们会写很多错误的东西.但是其实即使有一处写错了, 往往有10处相同的地方是对的.而且一旦用户认为某一段文档是正需要的, 他也会去相信它并且去积极思考, 这样也会发现其中的问题.例如, 最早的由社区贡献的文档都被放在了另外一个链接下:http://docs.tinyos.net, 这是一个很小的展示TinyOS编程的页面.我们一开始觉得, 一些小的东西我们应该把它们放在教程里面, 或者更深层次的站点里面.但是, 从历史角度看, 我们其实应该留给用户决定.&lt;/p&gt;
&lt;p&gt;但是, 一个人根本无法做到:创建一个wiki页面, 然后希望别人让它流行.于是开发者不得不努力的整理文档.其实用户就和我们每个人一样, 他们更多关注的是能从这里得到什么而不是去为这里创造什么.&lt;/p&gt;
&lt;h3&gt;9. &lt;acronym title=&quot;结论&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CONCLUSION&lt;/span&gt;&lt;/acronym&gt;&lt;/h3&gt;
&lt;p&gt;10年是一个很漫长的过程, 特别是对这样一个学术性的项目. TinyOS最终成功从一个UC Berkeley的学术圈内转变为由世界范围内的开发者和用户组成的社区.这是好几百的开发者成千上万小时的努力工作!从历史角度看, 一些当时我们认为很好的决定, 长远来看却起到了消极的作用, 这说明我们没有很好的预见性.例如, 虽然设计语言的扩展对于更好地提高操作系统的可编程性很有意义, 但是这样的一种操作系统的演变也疏远了新的用户, 限制了长期的发展.&lt;/p&gt;
&lt;p&gt;TinyOS已经成为了无线传感器网络研究和工程应用最重要的推动者, 我们也看到了许多这样一些方面的努力, 比如IETF正在开发一套标准用于低功耗无限传感器和以太网的互联.随着日益增长的计算能力遍布社会的各个角落, 这种将大学的研究过渡为实际的、现实世界的影响和利益的能力仍然是重要而又有意义的.希望我们在这里学到的经验教训能够帮助其他的人在未来做出更好的尝试!&lt;/p&gt;
&lt;h3&gt;致谢&lt;/h3&gt;
&lt;p&gt;TinyOS是很多开发者共同合作的结果, 需要列在这里的太多了, 它的成功值得每一个人庆祝, 我特别需要感谢Jason Hill, David Gay, Cory Sharp, Joe Polastre, Vlado Handziski, Jan Heinrich-Hauer, Kevin Klues, David Moss, Omprakash Gnawali, Jonathan Hui, John Regehr, Matt Welsh, AlecWoo, Robert Szewczyk, Kamin Whitehouse, Philip Buonadonna,Ben Greenstein, and Miklos Maroti.另外, 如果没有David Cullar的领导, Eric Brewer富有洞察力的语言设计, Shankar Sastry的应用开发知识, 我们就不可能成功的走到今天.最后但也是最重要的是, TinyOS的成功离不开使用它的用户, 他们报告BUG、提出功能要求、努力工作, 为我们在早年很好的指明了无线传感器的研究方向.&lt;/p&gt;
&lt;p&gt;我还要感谢SOSP 2011以及OSDI 2012这两个编程委员会, 他们在TinyOS成长过程中提出的极棒的建议让很多其他的研究者和工程师收益.&lt;/p&gt;
&lt;p&gt;尽管这项工作得到了微软研究院、因特尔研究院、DoCoMo资本、Foundation资本, 国家科学基金会#0615308(&amp;#8220;&lt;span class=&quot;caps&quot;&gt;CSR&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;EHS&lt;/span&gt;&amp;#8221;), #0627126(&amp;#8220;NeTS-&lt;span class=&quot;caps&quot;&gt;NOSS&lt;/span&gt;&amp;#8221;)以及#0846014（&amp;quot;CAREER&amp;quot;)以及 Stanford Terman研究协会的很多的奖励, 但是在这篇材料中的发现、结论或者表达的建议都只和我个人有关, 它不代表国家科学基金会的意见.&lt;/p&gt;
&lt;h3&gt;&lt;acronym title=&quot;引用&quot;&gt;&lt;span class=&quot;caps&quot;&gt;REFERENCE&lt;/span&gt;&lt;/acronym&gt;&lt;/h3&gt;
&lt;p&gt;请直接参看&lt;a href=&quot;http://sing.stanford.edu/pubs/tinyos-retrospective-osdi2012.pdf&quot;&gt;tinyos-retrospective&lt;/a&gt;尾部的引用!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>nesC generic 关键字</title>
    <link href="http://forestgump.me/2012/12/nesc-generic/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-12-12T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/12/nesc-generic</id>
    <content type="html">&lt;p&gt;学习TinyOS, 一开始很迷惑关键字generic关键字, 虽然知道这样就可以new出多个实例, 但是这种朦胧的感觉却持续了很久, 最近重新审视TinyOS, 得以写下这篇理解.接下来我会用几个实例来阐述怎么使用generic.&lt;/p&gt;
&lt;h3&gt;什么是generic&lt;/h3&gt;
&lt;p&gt;nesc的generic分为generic interface和generic component翻译过来就是通用接口和通用配件.通用接口和C++的template很类似, 我们不去讨论, 因为使用起来是没有歧义的.对于通用配件我们来看看具体的困惑是什么:&lt;/p&gt;
&lt;h3&gt;实例1:&lt;/h3&gt;
&lt;p&gt;大家可能会被源代码弄乱, 解释一下:就是在generic configuration内部使用具体的module然后new多个这样的configuration, 看看什么效果, 真的new出多个了吗?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//ITest.nc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// GeneriConfC.nc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GeneriConfC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinaryModuleP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinaryModuleP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// OrdinaryModuleP.nc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinaryModuleP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;localVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// TopAppC.nc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopAppC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericConfC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericConfC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// TopC.nc&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spontaneous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;event ITest.testDone: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;event ITest2.testDone:%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
	&lt;li&gt;编译生成app.c :            &amp;gt; nescc TopAppC.nc -fnesc-cfile=app.c&lt;/li&gt;
	&lt;li&gt;编译生成可执行文件a.out    &amp;gt; nescc TopAppC.nc&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;运行结果:
van9ogh@VAN9OGH $ ./a.out 
event ITest2.testDone:1
event ITest.testDone: 1
event ITest2.testDone:2
event ITest.testDone: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;// app.c(删去了没必要的声明, 留下真正相关的代码)
int OrdinaryModuleP$localVar = 0;

static inline void TopC$ITest$testDone(int val) { printf(&amp;quot;event ITest.testDone: %d\n&amp;quot;, val); }

static inline void TopC$ITest2$testDone(int val) { printf(&amp;quot;event ITest2.testDone:%d\n&amp;quot;, val); }

inline static void OrdinaryModuleP$ITest$testDone(int val) {
  TopC$ITest2$testDone(val);
  TopC$ITest$testDone(val);
}
static inline void OrdinaryModuleP$ITest$test(void ) {
  OrdinaryModuleP$localVar++; 
  OrdinaryModuleP$ITest$testDone(OrdinaryModuleP$localVar); 
}

inline static void TopC$ITest$test(void ) { OrdinaryModuleP$ITest$test(); }
inline static void TopC$ITest2$test(void ){ OrdinaryModuleP$ITest$test(); }

int main(void ) {
  TopC$ITest$test();
  TopC$ITest2$test();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到好像并没有生成两份代码拷贝的意思, 而且打印出来的结果也很令人诧异, 我们注意到不同的函数调用实际上被转发到相同的OrdinaryModuleP内部, 而对于event的处理, nesC采用广播的方式, 每一次signal其实都是将所有相关的command通知一遍.我们发现这个样子的代码几乎没有什么用处, 但我们也发现了一条可以用来广播的技巧, 不过我们还是不要趟浑水.&lt;/p&gt;
&lt;h3&gt;实例2:&lt;/h3&gt;
&lt;p&gt;这次我们看看正确的用法:(为了便于查看还是将所有的代码贴出)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ITest.nc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// GenericModuleP.nc&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenericModuleP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;localVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// TopC.nc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spontaneous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;event ITest.testDone: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;event ITest2.testDone:%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// TopAppC.nc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopAppC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericModuleP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericModuleP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ITest2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译就不说了, 我们看看运行结果:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;van9ogh@VAN9OGH $ ./a.out 
event ITest.testDone: 1
event ITest2.testDone:1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到这次正常了.我们再看看源代码验证一下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;// app.c
int GenericModuleP$0$localVar = 0;
int GenericModuleP$1$localVar = 0;

static inline void TopC$ITest$testDone(int val) { printf(&amp;quot;event ITest.testDone: %d\n&amp;quot;, val); }

inline static void GenericModuleP$0$ITest$testDone(int val){
  TopC$ITest$testDone(val);
}
static inline void GenericModuleP$0$ITest$test(void )
{
  GenericModuleP$0$localVar++;
  GenericModuleP$0$ITest$testDone(GenericModuleP$0$localVar);
}

inline static void TopC$ITest$test(void) { GenericModuleP$0$ITest$test(); }
static inline void TopC$ITest2$testDone(int val) { printf(&amp;quot;event ITest2.testDone:%d\n&amp;quot;, val); }

inline static void GenericModuleP$1$ITest$testDone(int val) { TopC$ITest2$testDone(val); }
static inline void GenericModuleP$1$ITest$test(void )
{
  GenericModuleP$1$localVar++;
  GenericModuleP$1$ITest$testDone(GenericModuleP$1$localVar);
}

inline static void TopC$ITest2$test(void) { GenericModuleP$1$ITest$test(); }
int main(void) {
  TopC$ITest$test();
  TopC$ITest2$test();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到代码被完完全全复制了两份.&lt;/p&gt;
&lt;h3&gt;总结:&lt;/h3&gt;
&lt;p&gt;不要认为new出来的就真的是一份新的, nesC语言也存在深复制和潜复制的问题, 因此我们在使用generic时要谨慎, 如果使用generic configuration要保证内部的配线也要是generic module 而不是简单的module.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>HOWTO：Deluge T2(micaz platform)</title>
    <link href="http://forestgump.me/2012/10/tinyos-deluge-t2/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-10-06T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/10/tinyos-deluge-t2</id>
    <content type="html">&lt;h3&gt;Quick Start&lt;/h3&gt;
&lt;p&gt;关于TinyOS Deluge T2最详尽的就是官方tutorials:&lt;a href=&quot;http://docs.tinyos.net/tinywiki/index.php/Deluge_T2&quot;&gt;Deluge T2&lt;/a&gt;按照上面的实践起来还是费了一番周折的， 因此写一个更详细的micaz版本HOWTO作为补充. 希望对大家有用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 一定要使用CVS上最新的tinyos-2.x版本， 否则有可能会有问题（笔者一开始也是这个问题， 怎么也不行）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;a) cd /opt&lt;/li&gt;
	&lt;li&gt;b) cvs -d:pserver:anonymous@tinyos.cvs.sourceforge.net:/cvsroot/tinyos login //不用输密码， 直接回车&lt;/li&gt;
	&lt;li&gt;c) sudo cvs -d:pserver:anonymous@tinyos.cvs.sourceforge.net:/cvsroot/tinyos -z3 co -P tinyos-2.x&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 2. 检查pyserial, automake是否安装&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;a) sudo apt-get install python-serial&lt;/li&gt;
	&lt;li&gt;b) sudo apt-get install automake&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 进入tinyos-2.x 编译deluge t2 python工具&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;a) cd /opt/tinyos-2.x/tools&lt;/li&gt;
	&lt;li&gt;b) ./Bootstrap //注意， 如果这一步报错， 那么是你的权限不够&lt;/li&gt;
	&lt;li&gt;c) ./configure&lt;/li&gt;
	&lt;li&gt;d) cd /opt/tinyos-2.x/tools/tinyos/misc&lt;/li&gt;
	&lt;li&gt;e) make&lt;/li&gt;
	&lt;li&gt;f) sudo make install&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 4. 搭建deluge环境!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;1. 编译 tosboot
	&lt;ul&gt;
		&lt;li&gt;a) cd tinyos-2.x/tos/lib/tosboot&lt;/li&gt;
		&lt;li&gt;b) make micaz&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;2. make 非基站节点(使用GoldenImage)
	&lt;ul&gt;
		&lt;li&gt;a) cd /opt/tinyos-2.x/apps/tests/deluge/GoldenImage&lt;/li&gt;
		&lt;li&gt;b) make micaz install.x mib520,/dev/ttyUSB0 (注意x为非0的值， 且互不相同)&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;3. make 基站节点
	&lt;ul&gt;
		&lt;li&gt;a) cd /opt/tinyos-2.x/apps/tests/deluge/Basestation&lt;/li&gt;
		&lt;li&gt;b) make micaz install.0 mib520,/dev/ttyUSB0&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 5. Your Application&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;1. 注意如果希望可以多次烧写非基站节点， 必须加入DelugeC组件, 也就是说DelugeC就是个底层的‘守护程序’， 这样只要刷机后这个守护程序还在， 以后还可以再次刷机
	&lt;ul&gt;
		&lt;li&gt;a) cd yourApplication Directory&lt;/li&gt;
		&lt;li&gt;b) 加入DelugeC组件&lt;/li&gt;
		&lt;li&gt;c) 修改Makefile, 添加:&lt;span class=&quot;caps&quot;&gt;BOOTLOADER&lt;/span&gt;=tosboot&lt;/li&gt;
		&lt;li&gt;d) make micaz&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;2. 将image注入基站(注意这里的-i 1表示注入基站的1号flash中)
	&lt;ul&gt;
		&lt;li&gt;a) tos-deluge serial@/dev/ttyUSB1:57600 -i 1 build/micaz/tos_image.xml&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;3. 让基站分发image并且在分发完成后让非基站节点reprogram(注意单单-d选项只表示注入不会重新烧写)1表示对基站的1号flash分发
	&lt;ul&gt;
		&lt;li&gt;a) tos-deluge serial@/dev/ttyUSB1:57600 -dr 1&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span class=&quot;caps&quot;&gt;FAQ&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;1. GoldenImage 是什么?
	&lt;ul&gt;
		&lt;li&gt;参看http://www.cs.berkeley.edu/~jwhui/deluge/deluge-manual.pdf， GoldenImage一节， 其实说白了就相当与手机的出场设置一样， 出现问题可以还原出场设置嘛, 因此总是一开始给非基站节点烧写GoldenImage程序&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;2. TOSBoot 和 Deluge什么关系?
	&lt;ul&gt;
		&lt;li&gt;关于TOSBoot专业的回答是这样子的:The TinyOS implementation of the bootloader, TOSBoot, provides the set of mechanisms necessary to program the microcontroller with a stored program image. 读者如果到$&lt;span class=&quot;caps&quot;&gt;TOSROOT&lt;/span&gt;/tos/lib/tosboot/micaz下可以发现为什么DelugeC要保证节点电压高于2.7V了(VoltageC.nc).&lt;/li&gt;
		&lt;li&gt;而Deluge是借助tosboot库来通过网络烧写节点应用程序的工具， 想当与tosboot之上的一层封装， 这样结合pc端的python工具tos-deluge我们就可以使用简单的命令完成复杂的网络烧写任务了.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;3. 为什么Led如此诡异(Led灯渐变效果)?
	&lt;ul&gt;
		&lt;li&gt;说起这个诡异的Led， 我们可以查看一下源代码(到$&lt;span class=&quot;caps&quot;&gt;TOSROOT&lt;/span&gt;/tos/lib/tosboot/lib/LedsC.nc）, 我们发现根本就没有控制电压的迹象， 以下是个人看法， 大家可以一起讨论:&lt;/li&gt;
		&lt;li&gt;要想控制渐变效果我认为有两种方法， 一种是实打实的， 就是控制电压， 另外一种是欺骗式的， 控制光产生的多少.&lt;/li&gt;
		&lt;li&gt;我们知道人眼睛观察物体明亮是根据接受到的光的强度来判断的， 那如何让人眼觉得Led有渐变效果呢， 我们只需偷出一点时间让Led产生不了足够的光就可以了， 这个在电子上有一个相关的术语叫占空比， 但是又不能偷出太多， 否则真的就是闪烁而不是渐变了， 读者可以到上面提到的LedsC组件中查看源代码， 就会发现用到了wait函数， 大体上就是这个意思了.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;4. 有时候无法使用-e 选项无法erase也无法inject?
	&lt;ul&gt;
		&lt;li&gt;出现这个原因主要是卷被锁住了， 可以采取的方法有:(两种都可以）
		&lt;ul&gt;
			&lt;li&gt;tos-deluge serial@/dev/ttyUSB1:57600 -s&lt;/li&gt;
			&lt;li&gt;tos-deluge serial@/dev/ttyUSB1:57600 -ls&lt;/li&gt;
		&lt;/ul&gt;&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我想参照这个HOWTO以及官方文档， Deluge应该是OK了， GoodLuck~&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>pthread: 回收线程的重要性</title>
    <link href="http://forestgump.me/2012/09/pthread-memory-leak/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-09-09T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/09/pthread-memory-leak</id>
    <content type="html">&lt;h3&gt;原因&lt;/h3&gt;
&lt;p&gt;笔者最经在写并发服务器， 一个采用多线程accept模型， 一个采用epoll异步事件+非阻塞IO模型， 在参考并测试sourceforge上一个小型的基于多线程accept&lt;a href=&quot;/code/c/linux/httpd.c&quot; type=&quot;color:red&quot;&gt;web服务器httpd.c&lt;/a&gt;时， 遇到了pthread_create: Cannot allocate memory错误， 我使用的是apache的ab测试. 最终发现由于使用了多线程并没有pthread_join() 或者 设置分离属性， 造成了极大的内存泄露, 另外在测试过程中我发现， 即使回收了线程的资源， 但是每个进程所能分配的线程数是有限制的， 这极大的抑制了并发量, 读者可以查看一下我修改过后的代码， 带有注释, 具体不再贴代码.&lt;/p&gt;
&lt;p&gt;本机的测试环境如下， 使用多线程accept在本机测试最大并发量在30左右, 读者可以自己测试比较下， 随着机器的性能结果有差异， 不过经过此次分析， 我想要想做到高并发走apache的老路是行不通的， 我想最佳的模型应该是： 前台采用epoll异步事件+非阻塞IO模型， 后台引入线程池（少量线程）减少CPU密集计算带来的阻塞。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;CPU:    Intel Core2 P7450 2.13GHZ
Memory: 2G

//ab &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:
van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ab -n 10000 -c 30 http://127.0.0.1:9001/index.html

// httpd服务器显示
van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./a.out 
httpd running on port 9001
pthread_create: Cannot allocate memory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;pmap&lt;/h3&gt;
&lt;p&gt;pmap， 我们使用pmap看一下当httpd.c程序出现pthread_create: Cannot allocate memory错误时， 内存的使用情况:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pmap -d 31547
31547:   ./a.out
Address   Kbytes Mode  Offset           Device    Mapping
00110000    1660 r-x-- 0000000000000000 008:00003 libc-2.15.so
002af000       8 r---- 000000000019f000 008:00003 libc-2.15.so
002b1000       4 rw--- 00000000001a1000 008:00003 libc-2.15.so
002b2000      12 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
002b5000     112 r-x-- 0000000000000000 008:00003 libgcc_s.so.1
002d1000       4 r---- 000000000001b000 008:00003 libgcc_s.so.1
002d2000       4 rw--- 000000000001c000 008:00003 libgcc_s.so.1
00a18000     128 r-x-- 0000000000000000 008:00003 ld-2.15.so
00a38000       4 r---- 000000000001f000 008:00003 ld-2.15.so
00a39000       4 rw--- 0000000000020000 008:00003 ld-2.15.so
00ce1000      92 r-x-- 0000000000000000 008:00003 libpthread-2.15.so
00cf8000       4 r---- 0000000000016000 008:00003 libpthread-2.15.so
00cf9000       4 rw--- 0000000000017000 008:00003 libpthread-2.15.so
00cfa000       8 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
00de4000       4 r-x-- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0103a000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0103b000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0183b000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0183c000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0203c000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0203d000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0283d000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0283e000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0303e000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0303f000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0383f000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
03840000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
04040000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
04041000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
04841000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
04842000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
05042000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
05043000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
05843000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
05844000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
06044000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
06045000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
06845000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
06846000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
07046000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
07047000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
07847000       4 ----- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
07848000    8192 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; anon &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
bf994000     132 rw--- 0000000000000000 000:00000   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; stack &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
...............
mapped: 3110692K    writeable/private: 3105356K    shared: 0K
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到包括swap， 3G的内存全部被消耗, 注意&lt;a href=&quot;http://linux.die.net/man/1/pmap&quot;&gt;man pmap&lt;/a&gt;中解释[anon]表示堆分配， [stack]表示栈分配. 系统为每一个线程分配了8M的栈空间， 而我们其实只需要和一个客户端套接字发生少量的交互而已.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>sudo: LD_LIBRARY_PATH</title>
    <link href="http://forestgump.me/2012/09/sudo/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-09-06T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/09/sudo</id>
    <content type="html">&lt;p&gt;sudo 命令提高了系统安全性， 但是有一个很困扰人的问题， 就是sudo会reset环境变量, 据说这个也是为了提高安全性， 比如LD_LIBRARY_PATH在sudo后丢失。&lt;/p&gt;
&lt;h3&gt;关于LD_LIBRARY_PATH&lt;/h3&gt;
&lt;p&gt;linux使用环境变量LD_LIBRARY_PATH来寻找library， 在ubuntu中， ldconfig也提供了相同的功能， 因此对于LD_LIBRARY_PATH变量我们有如下解决方案:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/ld.so.conf.d
van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo vi path.conf
van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样即使没有LD_LIBRARY_PATH路径， 依然可以找到对应的库, 注意path.conf里面填写的是库所在的文件夹路径， 而不是文件名.&lt;/p&gt;
&lt;h3&gt;更为一般的解决方案&lt;/h3&gt;
&lt;p&gt;sudo的配置文件是/etc/sudoers, 当前用户的环境变量不会应用到sudo， 这个和Defaults env_reset设置有关, 我们打开sudoers文件:&lt;/p&gt;
&lt;p&gt;首先 vi /etc/sudoers:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;#Defaults env_reset
Defaults !env_reset

// 还可以使用Defaults env_keep保证一些环境变量不被重置
Defaults env_keep += &amp;quot;PWD&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 sudo var=value command 注意必须Defaults !env_reset， 否则这里设置的环境变量是传递不到sudo的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo &lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/lib ./TOSEngine 8901
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Sudo_(简体中文)&quot;&gt;archlinux: Sudo&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/aix/library/au-sudo/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;IBM&lt;/span&gt;: 充分发挥 sudo 的作用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong style=&quot;color: red&quot;&gt;关于这个的讨论请看:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://bugs.launchpad.net/ubuntu/+source/xorg/+bug/366728&quot;&gt;LD_LIBRARY_PATH not loading from .profile nor /etc/environment&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.linuxquestions.org/questions/linux-general-1/exporting-ld_library_path-problem-509967/&quot;&gt;exporting LD_LIBRARY_PATH problem&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://superuser.com/questions/232231/how-do-i-make-sudo-preserve-my-environment-variables&quot;&gt;How do I make sudo preserve my environment variables?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>[转] 字符编码详解及由来</title>
    <link href="http://forestgump.me/2012/09/char-decode-encode/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-09-06T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/09/char-decode-encode</id>
    <content type="html">&lt;p&gt;这篇文章生动形象的讲解了字符编码的发展~&lt;/p&gt;
&lt;h3&gt;1. &lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong style=&quot;color:red&quot;&gt;很久很久以前&lt;/strong&gt;，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为&amp;quot;字节&amp;quot;。&lt;/p&gt;
&lt;p&gt;再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为&amp;quot;计算机&amp;quot;。&lt;/p&gt;
&lt;p&gt;开始计算机只在美国用。八位的字节一共可以组合出256(2的8次方)种不同的状态。&lt;/p&gt;
&lt;p&gt;他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就要做一些约定的动作。遇上00x10, 终端就换行，遇上0x07, 终端就向人们嘟嘟叫，例如遇上0x1b, 打印机就打印反白的字，或者终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20以下的字节状态称为&amp;quot;控制码&amp;quot;．&lt;/p&gt;
&lt;p&gt;他们又把所有的空格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的文字了。大家 看到这样，都感觉很好，于是大家都把这个方案叫做 &lt;span class=&quot;caps&quot;&gt;ANSI&lt;/span&gt; 的&amp;quot;Ascii&amp;quot;编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。&lt;/p&gt;
&lt;p&gt;后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们的字母里有许多是ASCII里没有的，为了可以在计算机保存他 们的文字，他们决定采用127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一 个状态255。从128到255这一页的字符集被称&amp;quot;扩展字符集&amp;quot;。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国 家的人们也希望可以用到计算机吧！&lt;/p&gt;
&lt;h3&gt;2. 大陆 GB2312、 GBK， GB18030&lt;/h3&gt;
&lt;p&gt;等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉,&lt;/p&gt;
&lt;p&gt;规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在 &lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt; 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的&amp;quot;全角&amp;quot;字符，而原来在127号以下的那些就叫&amp;quot;半角&amp;quot;字符了。&lt;/p&gt;
&lt;p&gt;中国人民看到这样很不错，于是就把这种汉字方案叫做 &amp;quot;GB2312&amp;quot;。GB2312 是对 &lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt; 的中文扩展．&lt;/p&gt;
&lt;p&gt;但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。&lt;/p&gt;
&lt;p&gt;后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字 符集里的内容。结果扩展之后的编码方案被称为 &lt;span class=&quot;caps&quot;&gt;GBK&lt;/span&gt; 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。&lt;/p&gt;
&lt;p&gt;后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。&lt;/p&gt;
&lt;p&gt;中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 &amp;quot;DBCS&amp;quot;（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处 理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣 们都要每天念下面这个咒语数百遍：&lt;/p&gt;
&lt;p&gt;&amp;#8220;一个汉字算两个英文字符！一个汉字算两个英文字符……&amp;#8221;&lt;/p&gt;
&lt;h3&gt;3. 台湾 BIG5&lt;/h3&gt;
&lt;p&gt;因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用 着同一种语言的兄弟地区，也分别采用了不同的 &lt;span class=&quot;caps&quot;&gt;DBCS&lt;/span&gt; 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个&amp;quot;汉字系统&amp;quot;，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序 就必须加装另一套支持 BIG5  编码的什么&amp;quot;倚天汉字系统&amp;quot;才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎 么办？&lt;/p&gt;
&lt;p&gt;真是计算机的巴比伦塔命题啊！&lt;/p&gt;
&lt;h3&gt;4. 国际化 UTF8、 UTF16&lt;/h3&gt;
&lt;p&gt;正在这时，大天使加百列及时出现了——一个叫 ISO（国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母 和符号的编码！他们打算叫它&amp;quot;Universal Multiple-Octet Coded Character Set&amp;quot;，简称 &lt;span class=&quot;caps&quot;&gt;UCS&lt;/span&gt;, 俗称 &amp;quot;UNICODE&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;UNICODE&lt;/span&gt; 开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 &lt;span class=&quot;caps&quot;&gt;ISO&lt;/span&gt; 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ascii里的那些“半角”字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于&amp;quot;半角&amp;quot;英文符号只需要用到低8位，所以其高 8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。&lt;/p&gt;
&lt;p&gt;这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是的，从 &lt;span class=&quot;caps&quot;&gt;UNICODE&lt;/span&gt; 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的&amp;quot;一个字符&amp;quot;！同时，也都是统一的&amp;quot;两个字节&amp;quot;，请注意&amp;quot;字符&amp;quot;和&amp;quot;字节&amp;quot;两个术语的不 同，“字节”是一个8位的物理存贮单元，而“字符”则是一个文化相关的符号。在UNICODE 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。&lt;/p&gt;

&lt;p&gt;从前多种字符集存在时，那些做多语言软件的公司遇上过很大麻烦，他们为了在不同的国家销售同一套软件，就不得不在区域化软件时也加持那个双字节字符集咒 语，不仅要处处小心不要搞错，还要把软件中的文字在不同的字符集中转来转去。UNICODE 对于他们来说是一个很好的一揽子解决方案，于是从 Windows NT 开始，MS 趁机把它们的操作系统改了一遍，把所有的核心代码都改成了用 &lt;span class=&quot;caps&quot;&gt;UNICODE&lt;/span&gt; 方式工作的版本，从这时开始，WINDOWS 系统终于无需要加装各种本土语言系统，就可以显示全世界上所有文化的字符了。&lt;/p&gt;
&lt;p&gt;但是，UNICODE 在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得 &lt;span class=&quot;caps&quot;&gt;GBK&lt;/span&gt; 与UNICODE 在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。&lt;/p&gt;
&lt;p&gt;如前所述，UNICODE 是用两个字节来表示为一个字符，他总共可以组合出65535不同的字符，这大概已经可以覆盖世界上所有文化的符号。如果还不够也没有关系，ISO已经准备 了UCS-4方案，说简单了就是四个字节来表示一个字符，这样我们就可以组合出21亿个不同的字符出来（最高位有其他用途），这大概可以用到银河联邦成立 那一天吧！&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;UNICODE&lt;/span&gt; 来到时，一起到来的还有计算机网络的兴起，UNICODE 如何在网络上传输也是一个必须考虑的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从UNICODE到 UTF时并不是直接的对应，而是要过一些算法和规则来转换。&lt;/p&gt;
&lt;h3&gt;最后&lt;/h3&gt;
&lt;p&gt;受到过网络编程加持的计算机僧侣们都知道，在网络里传递信息时有一个很重要的问题，就是对于数据高低位的解读方式，一些计算机是采用低位先发送的方法，例 如我们PC机采用的 &lt;span class=&quot;caps&quot;&gt;INTEL&lt;/span&gt; 架构，而另一些是采用高位先发送的方式，在网络中交换数据时，为了核对双方对于高低位的认识是否是一致的，采用了一种很简便的方法，就是在文本流的开始时 向对方发送一个标志符——如果之后的文本是高位在位，那就发送&amp;quot;FEFF&amp;quot;，反之，则发送&amp;quot;FFFE&amp;quot;。不信你可以用二进制方式打开一个UTF-X格式的 文件，看看开头两个字节是不是这两个字节？&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Valgrind: 发现 Memory Leak</title>
    <link href="http://forestgump.me/2012/09/valgrind/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-09-03T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/09/valgrind</id>
    <content type="html">&lt;p&gt;推荐一款工具， valgrind, 它是Linux下一个的仿真调试工具的集合， 包含以下工具模块:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://valgrind.org/images/valgrind-100.png&quot; width=&quot;335&quot; height=&quot;97&quot; alt=&quot;Valgrind logo&quot; title=&quot;Valgrind logo&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Memcheck   这是valgrind应用最广泛的工具，一个重量级的内存检查器，能够发现开发中绝大多数内存错误使用情况。&lt;/li&gt;
&lt;li&gt;Callgrind  主要用来检查程序中函数调用过程中出现的问题。&lt;/li&gt;
&lt;li&gt;Cachegrind 主要用来检查程序中缓存使用出现的问题。&lt;/li&gt;
&lt;li&gt;Helgrind   主要用来检查多线程程序中出现的竞争问题。&lt;/li&gt;
&lt;li&gt;Massif     主要用来检查程序中堆栈使用中出现的问题。&lt;/li&gt;
&lt;li&gt;Extension  可以利用core提供的功能，自己编写特定的内存调试工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;功能很多， 读者可以查询一下其他模块的使用方法， 下面我们看一看如何检测内存泄露&lt;/p&gt;

&lt;h3&gt;如何检测内存错误&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;valgrind --tool&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;memcheck --leak-check&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;full --show-reachable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes ./TOSEngine 8080 // 后面跟要运行的程序, 注意程序为一行， 这里javascript换行有点问题
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;输出&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;....... // 省略一些输出， 列出最需要的数据

==4685== HEAP SUMMARY:
==4685==     in use at exit: 12,000 bytes in 1 blocks
==4685==   total heap usage: 1 allocs, 0 frees, 12,000 bytes allocated
==4685== 
==4685== LEAK SUMMARY:
==4685==    definitely lost: 0 bytes in 0 blocks
==4685==    indirectly lost: 0 bytes in 0 blocks
==4685==      possibly lost: 0 bytes in 0 blocks
==4685==    still reachable: 12,000 bytes in 1 blocks
==4685==         suppressed: 0 bytes in 0 blocks
==4685== Reachable blocks (those to which a pointer was found) are not shown.
==4685== To see them, rerun with: --leak-check=full --show-reachable=yes
==4685== 
==4685== For counts of detected and suppressed errors, rerun with: -v
==4685== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出我这个程序至少在内存管理方面是没有错误的:)&lt;/p&gt;

&lt;h3&gt;参数&lt;/h3&gt;

&lt;p&gt;更详细的参数请直接前往&lt;a href=&quot;http://linux.die.net/man/1/valgrind&quot;&gt;man page&lt;/a&gt;, 这里列出一些常见的.&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;1、leak-check
  --leak-check=&amp;lt;no|summary|yes|full&gt; [default: summary]
  用于控制内存泄漏检测力度。
  no，不检测内存泄漏；
  summary，仅报告总共泄漏的数量，不报告具体泄漏位置；
  yes/full，报告泄漏总数、泄漏的具体位置。&lt;/li&gt;
&lt;li&gt;2、show-reachable
  --show-reachable=&amp;lt;yes|no&gt; [default: no]
  用于控制是否检测控制范围之外的泄漏，比如全局指针、static指针等。&lt;/li&gt;
&lt;li&gt;3、undef-value-errors
  --undef-value-errors=&amp;lt;yes|no&gt; [default: yes]
  用于控制是否检测代码中使用未初始化变量的情况。&lt;/li&gt;
&lt;li&gt;4、其他选项
  --log-file=filename 将结果输出到文件。
  --log-socket=127.0.0.1:8901 输出到网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-valgrind/&quot;&gt;应用 Valgrind 发现 Linux 程序的内存问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.valgrind.org/docs/manual/quick-start.html&quot;&gt;The Valgrind Quick Start Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://valgrind.org/info/about.html&quot;&gt;About Valgrind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Good Luck~&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>神一般的错误: typedef union epoll_data {...}</title>
    <link href="http://forestgump.me/2012/08/struct-epoll_event/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-29T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/struct-epoll_event</id>
    <content type="html">&lt;p&gt;休息之余说一下刚遇到的一个大BUG&amp;#8230;， 检查了好几天了， 就是不知道为何n = epoll_wait()返回的n &amp;gt; 0, 但是检查events中的fd却是0， 而我根本没有将0加入到epoll中啊&amp;#8230;.最终发现原来是union的原因:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 这个fd是函数参数传进来的&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 这个就是那个错误&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EPOLLET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EPOLLRDHUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 使用边沿触发, 并且监视客户端关闭事件&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;epoll_ctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoll_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EPOLL_CTL_ADD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原来struct epoll_event结构体中的data是一个union类型, 因此我自作主张的给那个指针初始化却覆盖了fd的值.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;	   &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		   &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		   &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_data_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	   &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		   &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* Epoll events */&lt;/span&gt;
		   &lt;span class=&quot;n&quot;&gt;epoll_data_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;cm&quot;&gt;/* User data variable */&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>C language:精确初始化结构体的一种新方法</title>
    <link href="http://forestgump.me/2012/08/init-use-dot/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-27T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/init-use-dot</id>
    <content type="html">&lt;h3&gt;以前&lt;/h3&gt;
&lt;p&gt;大多时候在定义的时候初始化一个结构体我们都是这么做的.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&amp;quot;LiuPeng&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;现在&lt;/h3&gt;
&lt;p&gt;现在有一种新方法，我们可以精确初始化某一个部分， 或者跳过一些变量的初始化.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;LiuPeng&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就是这样， 惊奇吧!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>semaphore: XSI和POSIX的比较</title>
    <link href="http://forestgump.me/2012/08/semaphore/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-24T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/semaphore</id>
    <content type="html">&lt;h3&gt;为什么&lt;/h3&gt;
&lt;p&gt;笔者最近想写一个线程池无意中发现了相比较于XSI IPC，POSIX也有自己的API接口， 读者可以看一下手册&lt;a href=&quot;http://www.kernel.org/doc/man-pages/online/pages/man7/sem_overview.7.html&quot;&gt;sem_overview&lt;/a&gt; 和 &lt;a href=&quot;http://www.kernel.org/doc/man-pages/online/pages/man7/shm_overview.7.html&quot;&gt;shm_overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文说明并比较XSI和POSIX中关于信号量的API接口。&lt;/p&gt;
&lt;h3&gt;信号量&lt;/h3&gt;
&lt;p&gt;信号量由Djkstra提出, 主要用于处理临界区问题. 可以想象为使用简单的counter变量来显示资源的状态， 当counter大于0时， 说明资源是可访问的， 而当counter小于等于0时， 说明资源正在被使用， 处于busy状态, 于是新的请求只能等待， 直到资源再次可以访问.当然counter本身受到内核的保护， 用户是无法直接访问的， 必须使用操作系统提供给我们的一组API来访问, 于是有了XSI和POSIX两类API.&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;caps&quot;&gt;XSI&lt;/span&gt; 信号量&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/sem.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;semget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semflg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;semctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* union semun arg */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 这两个做PV操作, P: -1, V: +1, 操作 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 下面带time的如果在指定时间还得不到资源将返回错误， errno被设置为EAGAIN&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;semop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sembuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;semtimedop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sembuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		                      &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;XSI信号量以key作为标示符， 而不是使用文件描述符， 对于创建和设置信号量有若干注意点， 这里有一个例子详细描述了如何使用XSI信号量:&lt;a href=&quot;/code/c/linux/semaphore-example.c&quot;&gt;semaphore-example.c&lt;/a&gt;, 但是不要忘记stevens的叮嘱: 尽量避免使用它&amp;#8230;&amp;#8230;&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;caps&quot;&gt;POSIX&lt;/span&gt; 信号量&lt;/h3&gt;
&lt;p&gt;就像管道一样， &lt;span class=&quot;caps&quot;&gt;POSIX&lt;/span&gt; semaphore分为命名信号量和匿名信号量， 我们先列出它们的接口:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;semaphore.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 1. 命名信号量&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sem_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oflag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sem_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oflag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mode_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_unlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 删除命名信号量&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 2. 匿名信号量&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pshared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 3. 公共部分&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 相当于+1&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 相当于-1&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_trywait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_timedwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sem_getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 拿到sem的值， 放到sval中&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到， 虽然函数貌似变多了， 其实变的简单了， 相比较使用XSI复杂的semctl来操作标示符key, POSIX的每一个接口都是清晰的， 熟悉的， 而且提供了命名的信号量， 这样我们就可以类似与IO多路转换的技术来操作它们了.&lt;/p&gt;
&lt;p&gt;我们来看一个完整的demo: &lt;a href=&quot;/code/c/linux/semaphore-example2.c&quot;&gt;semaphore-example2.c&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;     &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;errno.h&amp;gt;      &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;      &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;pthread.h&amp;gt;    &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string.h&amp;gt;     &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;semaphore.h&amp;gt;  &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;th_handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Thread %d: Waiting to enter critical region...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sem_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 临界区代码&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Thread %d: Counter Value: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Thread %d: Incrementing Counter...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Thread %d: New Counter Value: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// END&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sem_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;pthread_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;sem_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                 
    &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;pthread_join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sem_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                  
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里要说明一下sem_init第二个参数， 如果想让信号量能够被多个进程使用， 我们有两种方案:(前提是第二个参数为非0)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;fork() 这样子进程依然可以拿到semaphore变量的地址&lt;/li&gt;
	&lt;li&gt;shm_open()/semget()等, 让semaphore变量映射到一段共享内存段上， 这样多个进程是可以拿到这个地址的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实只要拿到semaphore变量的地址， 而且多个进程都可以访问这段地址上的semaphore变量， 就可以让semaphore在多个进程中使用&lt;/p&gt;
&lt;p&gt;比如我们看一下使用shmget()做映射的例子:&lt;a href=&quot;/code/c/linux/sem-shm.c&quot;&gt;sem-shm.c&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;     &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;errno.h&amp;gt;      &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;      &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;pthread.h&amp;gt;    &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string.h&amp;gt;     &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;semaphore.h&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/shm.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shmid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 创建一个共享存储段&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;shmid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shmget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPC_CREAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shmid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;shmget failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 拿到共享存储段的首地址， 赋值给semaphore变量&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shmid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;shmat failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Memory attached at %X&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 初始化semaphore&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sem_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译运行后， 我们使用ipcs命令看一下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ipcs
------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status      
0x000004d2 1766588471 van9ogh    666        16         0              
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那个key=0&amp;#215;000004d2转化为十进制刚好为1234, 这时， 别的进程就可以拿到这个semaphore了.&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;总的来说， 相比较于XSI复杂的接口， 笔者更倾向与POSIX, 这让我想起了Ken Thompson的经典语录:Ken Thompson有一次在被问到——如果他可以重新设计Unix系统，他会做些什么不同的事？而他回答到：“我会把“creat”多拼一个e”， 但是历史不允许这样， 因此有时我在想， 大师们是否在使用其他方式来改进当年的一些设计缺陷呢?&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>关于vim折叠的设置</title>
    <link href="http://forestgump.me/2012/08/vim-folding/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-22T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/vim-folding</id>
    <content type="html">&lt;p&gt;一直想修改一下vim的折叠的颜色， 表示太刺眼了， 折叠过后更看不懂代码. 最近终于下定了决心， 先贴一下效果图:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;之前
&lt;img src=&quot;/images/vim_folding_before.png&quot; style=&quot;width:500px;height:260px;border:solid 3px #e3e3e3;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后
&lt;img src=&quot;/images/vim_folding_after.png&quot; style=&quot;width:500px;height:260px;border:solid 3px #e3e3e3;&quot; /&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;配置过程&lt;/h2&gt;

&lt;p&gt;注意这个方法是针对我的配色， 如果读者希望在自己的配色方案上修改也是同样的原理&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;修改/usr/share/vim/vim73/colors/delek.vim&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;......
// 注释掉添加下面那行(注意行号不用添加)
22 &amp;quot;hi Folded     ctermbg=Grey    ctermfg=DarkBlue guibg=LightGrey guifg=DarkBlue
23 hi Folded term=standout ctermfg=darkcyan ctermbg=NONE guifg=Black guibg=#e3c1a5
.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;修改 .vimrc&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;quot;-----------------------------------------------
&amp;quot;  折叠基本设置
&amp;quot;-----------------------------------------------
&amp;quot; 设置vim配色(更换别的配色同样的修改方法)
colorscheme delek 

&amp;quot; 将折叠后的填充全部改为空格
set fillchars=vert:\ ,stl:\ ,stlnc:\
              
&amp;quot; 设置空格开关折叠
nnoremap &amp;lt;space&amp;gt; @=((foldclosed(line(&amp;#39;.&amp;#39;)) &amp;lt; 0) ? &amp;#39;zC&amp;#39; : &amp;#39;zO&amp;#39;)&amp;lt;CR&amp;gt;  

&amp;quot; 设置折叠区域的宽度
set foldcolumn=0            

&amp;quot; 设置折叠方式为自定义
set fdm=marker

&amp;quot; 遇到{,}就折叠
set fmr={,}

&amp;quot;-----------------------------------------------
&amp;quot;                  设置折叠文本
&amp;quot;-----------------------------------------------
&amp;quot; 这个函数的作用是折叠后希望出现: {...}的样式
:set foldtext=Do_Set_FoldText()
function! Do_Set_FoldText()
  let sub = substitute(getline(v:foldstart), &amp;#39;{.*&amp;#39;, &amp;#39;{...&amp;#39;, &amp;#39;&amp;#39;) . getline(v:foldend)
  return v:folddashes . sub
endfunction
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;折叠过后， 看代码就舒服多了， 再配上taglist, ctags, cscope等插件，打造一个自己的工作环境还是相当爽的.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>linux下有趣的命令</title>
    <link href="http://forestgump.me/2012/08/linux-command/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-22T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/linux-command</id>
    <content type="html">&lt;h3&gt;cal 9 1952&lt;/h3&gt;
&lt;p&gt;记得第一次接触linux时候， 是上的公开课， 老师问了这个问题:&lt;a href=&quot;http://en.wikipedia.org/wiki/Cal_(Unix)#Features&quot;&gt;1752年9月发生了什么?&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cal 9 1752
   September 1752     
Su Mo Tu We Th Fr Sa  
       1  2 14 15 16  
17 18 19 20 21 22 23  
24 25 26 27 28 29 30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;apt-build moo&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-build moo
         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    ~
         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;oo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   /
     _____&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;___/
    /  /&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;/ /
   ~  /  * /
     / ___/
*----/&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   /   /
  ~    ~
...&lt;span class=&quot;s2&quot;&gt;&amp;quot;Have you danced today? Discow!&amp;quot;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;banner&lt;/h3&gt;
&lt;p&gt;表示以后写控制台程序， 在也不用vi画图了&amp;#8230;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;banner &lt;span class=&quot;s2&quot;&gt;&amp;quot;van9ogh&amp;quot;&lt;/span&gt;
                         &lt;span class=&quot;c&quot;&gt;#####&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#    #    ##    #    # #     #   ####    ####   #    #&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#    #   #  #   ##   # #     #  #    #  #    #  #    #&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#    #  #    #  # #  #  ######  #    #  #       ######&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#    #  ######  #  # #       #  #    #  #  ###  #    #&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#  #   #    #  #   ## #     #  #    #  #    #  #    #&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;##    #    #  #    #  #####    ####    ####   #    #&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;apt-get moo&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get moo
         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;oo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
   /------&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt; 
  / |    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;   
 *  /&lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;--/&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
    ~~   ~~   
....&lt;span class=&quot;s2&quot;&gt;&amp;quot;Have you mooed today?&amp;quot;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;sl&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/sl2.png&quot; style=&quot;width:500px;height:260px;border:solid 9px #e3e3e3;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;cowsay/cowthink&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cowthink &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello van9ogh&amp;quot;&lt;/span&gt;
 _______________
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; Hello van9ogh &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 ---------------
        o   ^__^
         o  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;oo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;______
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/\&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;----w |
                &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;fortune (这个需要安装fortune-zh, 否则是英文)&lt;/h3&gt;
&lt;p&gt;作为banner很好玩啊， 还能学古诗&amp;#8230;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;fortune 
《登金陵凤凰台》
作者：李白
凤凰台上凤凰游，凤去台空江自流。
吴宫花草埋幽径，晋代衣冠成古丘。
三山半落青天外，二水中分白鹭洲。
总为浮云能蔽日，长安不见使人愁。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>pragma once:避免同一个文件被include多次</title>
    <link href="http://forestgump.me/2012/08/pragma-once/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-19T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/pragma-once</id>
    <content type="html">&lt;h3&gt;回想&lt;/h3&gt;
&lt;p&gt;对于这个问题我们并不陌生, 而且貌似用的很爽.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _VAN9OGH_H&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define _VAN9OGH_H&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 声明部分&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;#pragma once&lt;/h3&gt;
&lt;p&gt;现在有一个新方法， 而且不需要担心&amp;quot;_VAN9OGH_H&amp;quot;会出现冲突&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#pragma once&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 声明部分&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;维基上的解释是编译器会比较文件或者i节点而不是调用C的预处理器来扫描头文件， 但是这也带来一个问题， 就是对于符号链接, 他们都指向同一个文件可能就会出现错误.不过貌似问题已经修复了.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>typedef: 两个重要用法</title>
    <link href="http://forestgump.me/2012/08/typedef/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-18T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/typedef</id>
    <content type="html">&lt;h3&gt;用法&lt;/h3&gt;
&lt;p&gt;typedef基本的用法就不说了，我们来看不常用的:&lt;/p&gt;
&lt;h4&gt;定义函数指针类型&lt;/h4&gt;
&lt;p&gt;这个挺有用的， 回想signal函数声明， 作者的目的是想让signal函数返回一个void (*)(int)指针,也就是保存上一次signal调用时绑定的信号处理函数， 一般情况下我们很想这么做:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// signal 函数的实现&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但编译器通常会说括号错误.那我们怎么解决呢?&lt;/p&gt;
&lt;p&gt;这个时候我们有两种解决方案:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Cpp&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// signal 函数的实现&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是将signal放到里面， 不过会让我们更迷惑， 觉得这个不像函数的定义， 那我们不妨这样:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyFunc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// signal 函数的实现&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们不但将返回值一并替换了， 还将参数2也替换了， 反正他们是一样的， 这样看起来简洁多啦.&lt;/p&gt;
&lt;h4&gt;声明函数类型&lt;/h4&gt;
&lt;p&gt;只需要将表示指针的*去掉即可， 那么这个时候我们使用时， 就是在声明一个函数而不是函数指针变量， 因此还需要实现它.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 实现&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之前一直有一个问题缠绕着我， 在apue ch4.21有一个myftw用来递归遍历目录下所有文件的程序，它的typedef很奇怪.现在看来已经很明确了.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Myfunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这是声明&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myftw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Myfunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里的Myfunc *是函数指针&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dopath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Myfunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 同样是函数指针&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 后面实现了函数myfunc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.......&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>setsockopt优化网络性能:两个重要参数</title>
    <link href="http://forestgump.me/2012/08/setsockopt/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-17T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/setsockopt</id>
    <content type="html">&lt;h3&gt;原型&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于setsockopt具体参数使用方法请直接参考&lt;a href=&quot;http://linux.die.net/man/2/setsockopt&quot;&gt;manpage&lt;/a&gt;, 这里说明两个option选项: TCP_NODELAY, TCP_CORK, 这两个用来控制包的&amp;quot;Nagle化&amp;quot;, Nagle指的是&lt;a href=&quot;http://en.wikipedia.org/wiki/Nagle's_algorithm&quot;&gt;Nagle&amp;#8217;s algorithm&lt;/a&gt;, 它将较小的包组装成更大的帧， 减少了网络中包头远远大于数据的情况， 以此来降低网络拥塞。但是有些情况下我们不想这样， 比如说对用户交互实时性要求高的场合，又比如说传输大文件的场合。&lt;/p&gt;
&lt;h4&gt;实时性&lt;/h4&gt;
&lt;p&gt;显然这个时候数据不应该由Nagle接管， 我们直接设置:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP_NODELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样即使是1byte的数据也会立刻send出去&lt;/p&gt;
&lt;h4&gt;大文件&lt;/h4&gt;
&lt;p&gt;如果我们需要传输大文件， 我们可以使用TCP_CORK, 它就像一个塞子， 我先把管道塞住， 等到数据被填满然后，再拔去塞子，这样一起发送多个数据集合， 在这些数据之间不存在延迟， 可以提高性能. 实际上我们是觉得Nagle algorithm算法对我们来说还不是足够好， 因此我们来点更变态的.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP_CORK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//塞住&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP_CORK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 拔去塞子&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个参数都是通过取消Nagle algorithm来适应特殊情况， 但它们是本身是两个相反的方向.实际上使用这两个参数完全根据自己的情况， 以上两种情况只是举例， 使之更形象而已。&lt;/p&gt;
&lt;h4&gt;Appendix&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;1. 注意TCP_CORK只在linux 2.4内核以后使用&lt;/li&gt;
	&lt;li&gt;2. 其实setsockopt我们还用的一个参数是SO_REUSEADDR, 也非常棒!这样可以避免服务器再出现烦人的bind:address already in use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Nagle's_algorithm&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://baus.net/on-tcp_cork&quot;&gt;TCP_CORK: More than you ever wanted to know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>C++中extern "C" 使用</title>
    <link href="http://forestgump.me/2012/08/__cplusplus_and_extern/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-16T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/__cplusplus_and_extern</id>
    <content type="html">&lt;p&gt;在C++中经常想使用C模块， 或者C++模块中想拿一点到C里面使用，该怎么做呢?我们直接贴代码&lt;/p&gt;
&lt;h3&gt;用法&lt;/h3&gt;
&lt;p&gt;1. C++中使用C&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* c_example.h */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef _C_EXAMPLE_H&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define _C_EXAMPLE_H&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* c_example.c */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;c_example.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// c++实现文件，调用add：cpp_example.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;c_example.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.在C中使用C++ &lt;br /&gt;
(这个就比较简单了， C++代码使用extern &amp;quot;C&amp;quot;声明， C只要extern就OK了)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// C++头文件 cpp_example2.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef _CPP_EXAMPLE_H&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define _CPP_EXAMPLE_H&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*或者: extern &amp;quot;C&amp;quot; int add(int x, int y);*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// C++实现文件 cpp_example2.cpp&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;cpp_example.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// C调用C++ add:c_example2.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef _C_FILE_H&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define _C_FILE_H&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// C调用C++ add:c_example2.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;cFile.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;由于C++支持函数的重载， 我们知道它的这种重载是在编译时就确定下来了， 因此C++在编译过程中会对函数名称进行修改，例如我们对cpp_example2.h编译:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g++ cppExample.cpp -shared -o libcxx.so
van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;objdump -t libcxx.so  | grep add
0000040c g     F .text  0000000d              add // 这就是编译过后函数的名称
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到的是add函数的名称没有发生变化，因为我们加了extern &amp;#8220;C&amp;#8221;, 现在我们将extern &amp;quot;C&amp;quot;注释掉再编译:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g++ cppExample.cpp -shared -o libcxx.so
van9ogh@WSN &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;objdump -t libcxx.so  | grep add
g     F .text  0000000d              _Z3addii     // 函数名果然发生了变化
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这很符合常理， C++是对C的扩展， 如果抛弃大量的C代码库， 又怎么会有这么多人为之疯狂， 向Bjarne Stroustrup致敬!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>websocket</title>
    <link href="http://forestgump.me/2012/08/websocket/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-15T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/websocket</id>
    <content type="html">&lt;p&gt;让数据实时显示一直有多种解决方案， 我们先把它们按照鄙视的食物链做一个rank:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;页面本身不断更新， 定时刷新浏览器（暴力型)&lt;/li&gt;
	&lt;li&gt;使用ajax XMLHttpRequest 先GET/POST， 服务器响应后返回更新数据给浏览器&lt;/li&gt;
	&lt;li&gt;comet 长链接，服务器单方向发数据&lt;/li&gt;
	&lt;li&gt;websocket 双方握手， 像TCP一样， 以后通信不需要header&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体感觉是越来越和谐了， 最新的websocket还没有得到完全的支持，但对于目前大量的web应用程序来说已经有点迫不及待了，这就像etag被提出来一样，我们应该避免做或少做无用功， 减少代码对资源的消耗， 环保从代码做起, 大牛们从没停下脚步。&lt;/p&gt;
&lt;p&gt;另外&amp;quot;Content-type:multipart/x-mixed-replace;boundary=www.briup.com&amp;quot;和&amp;quot;&amp;#8212;www.briup.com&amp;quot;连用其实就是comet中&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/wa-reverseajax1/index.html&quot;&gt;多部分的 XMLHttpRequest&lt;/a&gt;技术，这就是为什么在暑假briup视频采集项目, 浏览器端我们什么也没做，它却就帮我们不断显示图片，因为浏览器本身会维护一个长连接支持multi-part， 因此我们可以将这个长链接转移到XMLHttpRequest上面.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajaxSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multipart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ajax&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
			        &lt;span class=&quot;nx&quot;&gt;processEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时在下一次连接之前， 本次的连接不会断开, 关键就是那个xhr.multipart = true, 其他的都一样. 但这是需要浏览器支持的.&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/WebSocket&quot;&gt;websocket&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/views/web/libraryview.jsp?view_by=search&amp;sort_by=Date&amp;sort_order=desc&amp;view_by=Search&amp;search_by=反向+Ajax+部分&amp;dwsearch.x=14&amp;dwsearch.y=15&quot;&gt;反向ajax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;补充(20120819)&lt;/h2&gt;
&lt;p&gt;从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接 Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>细说tinyos PrintfC</title>
    <link href="http://forestgump.me/2012/08/tinyos-printf/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-15T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/tinyos-printf</id>
    <content type="html">&lt;p&gt;关于PrintfC的一些基本使用方法请直接访问&lt;a href=&quot;http://docs.tinyos.net/tinywiki/index.php/The_TinyOS_printf_Library&quot;&gt;tinyos tutorials Printf Library&lt;/a&gt;, 本文给出的是tinyos底层的一些实现.&lt;/p&gt;
&lt;h2&gt;Prepare&lt;/h2&gt;
&lt;p&gt;参考的目录如下:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;$&lt;span class=&quot;caps&quot;&gt;TOSROOT&lt;/span&gt;/tos/lib/printf/&lt;/li&gt;
	&lt;li&gt;$&lt;span class=&quot;caps&quot;&gt;TOSROOT&lt;/span&gt;/tos/system&lt;/li&gt;
	&lt;li&gt;$&lt;span class=&quot;caps&quot;&gt;TOSROOT&lt;/span&gt;/apps/tutorials/Printf&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;问题回顾&lt;/h2&gt;
&lt;p&gt;平常我们使用PrinftC组件都是只需要记住包含的组件:PrinftC, SerialStartC, 注意包含都文件printf.h就差不多了，必要的时候再使用printfflush进行缓冲刷新，会用就行了。但是PrintfC本身底层是怎么刷新的呢?我们先将目录&lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;下的TestPrintfC.nc fired事件调用printf的部分修改一下:&lt;/p&gt;
&lt;p&gt;TestPrintfC.nc&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//将四句printf注释掉，只添加一句&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//	printf(&amp;quot;Hi I am writing to you from my TinyOS application!!\n&amp;quot;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//	printf(&amp;quot;Here is a uint8: %u\n&amp;quot;, dummyVar1);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//	printf(&amp;quot;Here is a uint16: %u\n&amp;quot;, dummyVar2);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//	printf(&amp;quot;Here is a uint32: %ld\n&amp;quot;, dummyVar3);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//	printfflush();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Makefile再添加一句:&lt;br /&gt;
//设置缓冲区大小为10&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DPRINTF_BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译运行后我们发现x是每6个为一组打印的， 但是我们设置的缓冲区大小为10啊， 在目录&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;下我们发现了printf的源代码&lt;/p&gt;
&lt;p&gt;generic-printf.h&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define printf _printf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lowlevel_putc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 


&lt;span class=&quot;cm&quot;&gt;/* 打印一个字符， 调用lowlevel_putc(c) */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
  &lt;span class=&quot;cm&quot;&gt;/* Convert CR to CR/LF */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lowlevel_putc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lowlevel_putc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/* 之所以要列出_puts是想说明对于\0是不会打印的 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// printf太长了， 我们写一下程序的逻辑&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 对于参数化列表请参考[1], 主要是几个变量 va_list, va_start, va_end，va_arg&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kt&quot;&gt;va_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;va_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//	分别处理%f %d %c %s %l %u 一系列的格式的打印;&lt;/span&gt;

	   &lt;span class=&quot;n&quot;&gt;_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;va_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntr_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到调用关系为 printf&amp;#8594; putchar&amp;#8594;lowlevel_putc() &lt;br /&gt;
我们继续追踪, 寻找lowlevel_putc,发现在PutcharP.nc中找到了它的足迹:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PutcharP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 省略了其他实现&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowlevel_putc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spontaneous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续追踪， 发现有两个组件提供putchar commnad, SerialPrintfP 和 PrintfP&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// PrintfP.nc 实现&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#undef putchar&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_STARTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRINTF_BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_FLUSHING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sendNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// SerialPrintfP.nc 实现&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#undef putchar&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UartByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们发现PrintfP提供的是带有队列的putchar， 每次执行putchar都是先将字符送入队列， 并且当队列的大小超过队列总长度的一半时， 我们开始进行”FLUSH“, 而另外一个则直接调用send， 发往串口， 因此这里就不难理解前面的现象了， :)&lt;br /&gt;
在结束的时候我们再看一下队列的定义:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 在PrintfC.nc中&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;printf.h&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintfC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintfQueueC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRINTF_BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueueC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PrintfP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueueC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// include.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef PRINTF_BUFFER_SIZE&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define PRINTF_BUFFER_SIZE 250 &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if PRINTF_BUFFER_SIZE &amp;gt; 255&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define PrintfQueueC	BigQueueC&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define PrintfQueue	    BigQueue&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define PrintfQueueC	QueueC&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define PrintfQueue	    Queue&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作者对队列的选用进行了编译时动态选择， 很细腻的手法啊!&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/hackbuteer1/article/details/7558979&quot;&gt;C 语言的可变参数表函数的设计&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>将JSON发往http server</title>
    <link href="http://forestgump.me/2012/08/ajax-json-to-server/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-15T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/ajax-json-to-server</id>
    <content type="html">&lt;p&gt;这个是供需双方都迫不及待的事情， 我们看一下代码是如何解决的，但这段代码没有解决XMLHttpRequest在IE上的兼容性，我们暂且放在一边.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* 注意， 这个js库可以到github上下载到 */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;./json.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;programmers&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;    
						&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Brett&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
						  &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;McLaughlin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						  &lt;span class=&quot;s2&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;brett@newInstance.com&amp;quot;&lt;/span&gt; 
	                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    
	                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jason&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
						  &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hunter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s2&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jason@servlets.com&amp;quot;&lt;/span&gt; 
						&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
	        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;musicians&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;    
	                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Tad&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Williams&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
						  &lt;span class=&quot;s2&quot;&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fantasy&amp;quot;&lt;/span&gt; 
						&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    
						&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Frank&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Peretti&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
						  &lt;span class=&quot;s2&quot;&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;christian fiction&amp;quot;&lt;/span&gt; 
						&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
			&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// XMLHttpRequest 属性和方法&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*	open()：建立到服务器的新请求。&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	send()：向服务器发送请求。&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	abort()：退出当前请求。&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	readyState：提供当前 HTML 的就绪状态。&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	responseText：服务器返回的请求响应文本。&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xmlHttp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xmlHttp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xmlHttp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 将people转化为JSON字符串 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;cm&quot;&gt;/* 我们使用POST方法, 其中url内容意思是在7890端口开了一个测试，打印数据 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xmlHttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://localhost:7890&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xmlHttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xmlHttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们察看一下服务器端接收到的数据是什么样子的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;POST / HTTP/1.1
Host: localhost:7890
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:14.0) Gecko/20100101 Firefox/14.0.1 FirePHP/0.7.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Referer: http://localhost/test/
Content-Length: 311
Origin: http://localhost
x-insight: activate
Pragma: no-cache
Cache-Control: no-cache

{&amp;quot;programmers&amp;quot;:[{&amp;quot;firstName&amp;quot;:&amp;quot;Brett&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;McLaughlin&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;brett@newInstance.com&amp;quot;},{&amp;quot;firstName&amp;quot;:&amp;quot;Jason&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Hunter&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;jason@servlets.com&amp;quot;}],&amp;quot;musicians&amp;quot;:[{&amp;quot;firstName&amp;quot;:&amp;quot;Tad&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Williams&amp;quot;,&amp;quot;genre&amp;quot;:&amp;quot;fantasy&amp;quot;},{&amp;quot;firstName&amp;quot;:&amp;quot;Frank&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Peretti&amp;quot;,&amp;quot;genre&amp;quot;:&amp;quot;christian fiction&amp;quot;}]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/wa-ajaxintro/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;IBM&lt;/span&gt; Ajax 系列文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>使用dlxxx()动态加载库文件</title>
    <link href="http://forestgump.me/2012/08/linux-c-load-library/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-13T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/linux-c-load-library</id>
    <content type="html">&lt;p&gt;函数原型:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dlclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译时gcc参数 -ldl&lt;br /&gt;
dlopen参数flag:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;RTLD_LAZY    推迟加载（有点像copy on write技术)&lt;/li&gt;
	&lt;li&gt;RTLD_NOW     立刻加载&lt;/li&gt;
	&lt;li&gt;RTLD_GLOBAL  可以使得子library进行调用&lt;/li&gt;
	&lt;li&gt;RTLD_LOCAL   与RTLD_GLOBAL相反&lt;/li&gt;
	&lt;li&gt;RTLD_NOLOAD  不加载， 可用于测试是否已经驻留在程序中&lt;/li&gt;
	&lt;li&gt;RTLD_DEEPBIND&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* 程序加载libm.so， 拿到求cos值的函数的地址, 计算cos(2*PI) */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cosine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;libm.so&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_LAZY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Clear any existing error */&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 两种转换方法:&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/**(void **)(&amp;amp;cosine) = dlsym(handle, &amp;quot;cos&amp;quot;);*/&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cosine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cosine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.1415926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;cosine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cosine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.1415926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;dlclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用这种方式的动态加载好处是我们可以定义一些模块， 在配置文件中指定需要加载的各个模块，这就为c实现更高层次的多态提供了可能， 这种方式在很多linux的项目中得到了使用， 我们先看一下apache httpd， 如今的apache已经从最初的httpd发展为现在的apache软件基金会，大量的project, 因此apache本身提供了一个跨平台的运行库:Apache Portable Runtime(apr), 以及在这之上的unitl:apr-util库, 包括对dlxxx()的封装.&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.4/dso.html&quot;&gt;Dynamic Shared Object (&lt;span class=&quot;caps&quot;&gt;DSO&lt;/span&gt;) Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>/dev/random</title>
    <link href="http://forestgump.me/2012/08/dev-random/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-13T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/dev-random</id>
    <content type="html">&lt;p&gt;/dev/random是一个特殊的设备文件，可以用作随机数发生器或伪随机数发生器。它允许程序访问来自设备驱动程序或其它来源的背景噪声。并不是所有操作系统中的/dev/random的实现都是相同的，而Linux是第一个以背景噪声产生真正的随机数的实现。/dev/random的一个副本是/dev/urandom （&amp;quot;unlocked&amp;quot;，非阻塞的随机数发生器）&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki//dev/random&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>apue读书笔记:与网络打印机通信</title>
    <link href="http://forestgump.me/2012/08/apue-ch21-ipp/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-13T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/apue-ch21-ipp</id>
    <content type="html">&lt;h2&gt;为什么&lt;/h2&gt;
&lt;p&gt;最近笔者自己有一个项目: 无线传感器采集与展示， 但苦于没有经验， 不知如何下手，于是在github上找灵感，先是看了hddtemp， webcam，最后找到了apue的最后一章， 才发现这才是我需要的， 正好之前看apue没有看完，刚好用上。对于无线传感器展示服务器端， 我想前端我会实现基于http的服务器， 对于服务器与client之间的通信就使用google protobuf或者json，必要时为了性能，可以仿照ngx使用线程池+异步IO，服务器内部采用两个进程，一个进程用来采集节点的数据并写入数据库，另外一个负责前端以及数据挖掘，当然这两个进程内部可以开多个线程并发.进程之间的通信使用管道或者消息队列。&lt;/p&gt;
&lt;h2&gt;关于apue ch21&lt;/h2&gt;
&lt;p&gt;ipp是Internet Printing Protocol, 它构建在http协议之上, 作者其实写了两个程序print和printd, 客户端和服务器。&lt;br /&gt;
下面是print程序的逻辑:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;int main(int argc, char *argv[])
{
	检查用户输入
	连接服务器（printd)
	if (连接成功)
		提交文件() {
			构建文件头部
			发送header
			发送file
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;printd程序逻辑&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;int main(int argc, char *argv[])
{
	设置信号屏蔽字(因为要单独开一个线程处理信号)
	初始化
	打开服务器(多个地址就打开多个socket fd)
	创建线程(与打印机通信)
	创建线程(处理信号)
	for (;;) {
		select(.....);
		foreach fd in fds
			if (FD_ISSET(fd))
				client = accept(....)
				创建线程(处理客户端请求)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序的逻辑如此简单，关键是如何管理多个客户端线程以及多个提交的文件呢。&lt;br /&gt;
作者使用了两个结构体, 并且定义了一些函数来管理它们， 我们且看:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 管理客户端提交的打印文件， print程序只要调用add_job即可&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* next in list */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* previous in list */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;jobid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* job ID */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printreq&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* copy of print request */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_jobno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_newjobno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printreq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;replace_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 管理多个客户端线程， 如果遇到情况我们可以采用使线程取消来释放资源&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker_thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker_thread&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* next in list */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker_thread&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* previous in list */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* thread ID */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* socket */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kill_workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作者使用了互斥量与条件变量， 这个我们是不难理解的，对于job和worker_thread数据结构，它们都是共享资源。&lt;/p&gt;
&lt;p&gt;关于客户端线程和与打印机通信的线程它们的实现都是相当的简单的， 基本上属于一问一答的形式&lt;/p&gt;
&lt;h2&gt;一些值得注意的地方&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;如何向ipp首部添加选项&lt;/li&gt;
	&lt;li&gt;如何写一个可靠的异步IO来read数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;属性的格式是这样的:描述属性类型的1字节标志，然后是以2字节的二进制整数形式存储的属性名字的长度，接着是属性名，然后是属性值的长度， 然后是属性值。&lt;br /&gt;
我们看看add_option(&amp;#8230;)函数是如何做到的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	                         &lt;span class=&quot;c1&quot;&gt;// 以下面的函数调用为例, 以下为对应值的变化&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// G&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// strlen(&amp;quot;attributes-charset&amp;quot;) = 18&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 18&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 18&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &amp;quot;attributes-charset&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// cp += 18个char&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// strlen(&amp;quot;utf-8&amp;quot;) = 5&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// &amp;quot;utf-8&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// cp + (6次++) + 18 + 5 = 28&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define TAG_CHARSET;          0x47&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* 0x47 ASCII为 */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;icp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ibuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ibuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ibuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ilen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;icp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;icp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG_CHARSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;attributes-charset&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ilen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ibuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作者在32位机器上使用union定义了一个16位int和2个char类型，正好完成了这个工作， 两次都是这么做到的.&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;第二个主题: 如何写一个可靠的异步IO来read数据&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;nfds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fd_set&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;readfds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeval&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_usec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FD_ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readfds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FD_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readfds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;nfds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readfds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ETIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;treadn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;nleft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nleft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nleft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* error, return -1 */&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/* EOF */&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nleft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* return &amp;gt;= 0 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不去看tinyos c语言串口通信的api，可能我也不会对这个这么敏感，确实在一些低速的设备上我们往往不可能一次性就read我们希望的数据， 但是也不期待程序返回，我想select和重复读组合起来是个很好的解决方案，对此我们需要对read系统调用的返回值情况有一个认识.并且read系统调用如果被信号打断可能是会重启的(errno = &lt;span class=&quot;caps&quot;&gt;EINTR&lt;/span&gt;), 也要十分注意。</content>
  </entry>
  
  <entry>
    <title>使用jekyll搭建轻量级博客</title>
    <link href="http://forestgump.me/2012/08/use-jekyll-blog/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-12T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/use-jekyll-blog</id>
    <content type="html">&lt;h2&gt;为什么&lt;/h2&gt;
&lt;p&gt;马上就大三了，写过的博客有几个但都没有能够坚持下来，一方面是由于项目在身， 学习总是渴求狼吞虎咽式,这本身其实也浪费了很多时间， 学习总是没有能够静下心来， 读了很多书都不求甚解， 我知道这不是我想要的， 之前在google reader上一直订阅几个技术博客， 十分钦佩他们能够坚持走下来， 也萌生了写技术博客的想法， 但一直没有行动， 趁着暑假， 我知道我该行动了。&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://coolshell.cn&quot; class=&quot;blog&quot; title=&quot;酷壳&quot;&gt;coolshell&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://mindhacks.cn&quot; class=&quot;blog&quot; title=&quot;刘未鹏&quot;&gt;mindhacks&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://codingnow.com&quot; class=&quot;blog&quot; title=&quot;云风&quot;&gt;codingnow&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.yangzhiping.com&quot; class=&quot;blog&quot; title=&quot;阳志平&quot;&gt;yangzhiping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;资料&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.soimort.org/tech-blog/2011/11/19/introduction-to-jekyll_zh.html&quot; class=&quot;blog&quot;&gt;像黑客一样写博客&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://beiyuu.com/github-pages/&quot; class=&quot;blog&quot;&gt;使用Github Pages建独立博客&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://jiyeqian.github.com/2012/07/host-your-pages-at-github-using-jekyll/&quot; class=&quot;blog&quot;&gt;基于jekyll的github建站指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者讲的很清楚， 我觉得主要是购买域名麻烦一点， 估计在学校期间先凑合着使用github-page，以后工作了再去GoDaddy购买域名的。&lt;/p&gt;
&lt;h2&gt;关于语法高亮&lt;/h2&gt;
&lt;p&gt;_layout/post.html&lt;/p&gt;
&lt;p&gt;关于语法高亮， 主要是使用javascript, 你也可以到&lt;a href=&quot;http://code.google.com/p/syntaxhighlighter/&quot;&gt;google code&lt;/a&gt;上去下载, 这里直接使用了amazon上的js资源&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shCore.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushRuby.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushPhp.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushXml.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushCss.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushBash.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushJScript.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushCpp.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushJava.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushCSharp.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushPython.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://communicatopia.s3.amazonaws.com/js/shBrushSql.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ClipboardSwf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://communicatopia.s3.amazonaws.com/js/clipboard.swf&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//name, showGutter, showControls, collapseAll, firstLine , showColumns&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HighlightAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;今年写30篇以上博客&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://forestgump.me/2012/08/Hello-World/?utm_source=atom&amp;utm_medium=rss&amp;utm_campaign=atom"/>
    <updated>2012-08-12T00:00:00+08:00</updated>
    <id>http://forestgump.me/2012/08/Hello-World</id>
    <content type="html">&lt;p&gt;Hello World World&lt;/p&gt;
</content>
  </entry>
  
</feed>
